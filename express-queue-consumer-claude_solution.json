{
  "createdAt": "2025-05-30T19:47:24.255Z",
  "updatedAt": "2025-06-11T21:50:31.836Z",
  "id": "4zBFYy8VyWBBEiMg",
  "name": "Express Queue Consumer",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "operation": "pop",
        "list": "queue:express",
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        620,
        280
      ],
      "id": "dc0d07af-3fcf-40e8-a1f3-f978b6462ff1",
      "name": "Pop Express Queue",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first()?.json;\n\nif (!inputData || !inputData.propertyName) {\n console.log('Express Consumer: Nenhuma mensagem na fila');\n return []; // Termina execu√ß√£o sem erro\n}\nconst queueData = $input.first().json.propertyName;\nconst messageData = queueData.originalMessage;\nconst classification = queueData.classification;\nconst routing = queueData.routing;\n\n// Extrair texto da mensagem\nconst messageText = messageData.messageText || messageData.imageCaption || '';\n\n// Determinar resposta baseada em patterns simples\nfunction generateExpressResponse(text) {\n  const lowerText = text.toLowerCase().trim();\n  \n  // Cumprimentos\n  if (/^(oi|ol√°|hey|e a√≠|salve)/.test(lowerText)) {\n    return \"Oi! üëã Sou o Dieta F√°cil, seu assistente nutricional. Como posso ajudar voc√™ hoje?\";\n  }\n  \n  if (/^(bom dia)/.test(lowerText)) {\n    return \"Bom dia! ‚òÄÔ∏è Pronto para cuidar da sua alimenta√ß√£o hoje?\";\n  }\n  \n  if (/^(boa tarde)/.test(lowerText)) {\n    return \"Boa tarde! üå§Ô∏è Como est√° sua alimenta√ß√£o hoje?\";\n  }\n  \n  if (/^(boa noite)/.test(lowerText)) {\n    return \"Boa noite! üåô Vamos revisar como foi sua alimenta√ß√£o hoje?\";\n  }\n  \n  // Como est√° / Status\n  if (/^(como (est√°|vai|anda)|tudo bem)/.test(lowerText)) {\n    return \"Estou aqui e pronto para ajudar! üí™ Registre suas refei√ß√µes para acompanharmos sua dieta.\";\n  }\n  \n  if (/^(como estou|status)/.test(lowerText)) {\n    return \"Para ver seu status de hoje, me conte o que voc√™ comeu ou digite 'resumo' üìä\";\n  }\n  \n  // Confirma√ß√µes\n  if (/^(ok|okay|entendi|beleza|show|perfeito|legal)/.test(lowerText)) {\n    return \"Perfeito! ‚úÖ Continue registrando suas refei√ß√µes para manter o controle.\";\n  }\n  \n  if (/^(obrigad|brigad|vlw|thanks)/.test(lowerText)) {\n    return \"Por nada! üòä Estou sempre aqui para ajudar com sua nutri√ß√£o.\";\n  }\n  \n  // Menu/Ajuda\n  if (/^(menu|ajuda|help|comandos)/.test(lowerText)) {\n    return `üçΩÔ∏è *Menu Dieta F√°cil*\\n\\nüìù *Registrar:*\\n‚Ä¢ \"Comi [alimento]\" - Registra refei√ß√£o\\n‚Ä¢ \"Bebi [quantidade]ml\" - Registra √°gua\\n\\nüìä *Consultar:*\\n‚Ä¢ \"Resumo\" - Ver total do dia\\n‚Ä¢ \"Como estamos\" - Status geral\\n\\n‚ùì *D√∫vidas:*\\n‚Ä¢ \"Posso comer [alimento]?\"\\n‚Ä¢ \"Quantas calorias tem [alimento]?\"\\n\\nüí° *Dica:* Envie fotos dos seus pratos para an√°lise autom√°tica!`;\n  }\n  \n  // Cancelar/Sair\n  if (/^(cancelar|sair|parar|tchau|at√©)/.test(lowerText)) {\n    return \"At√© logo! üëã Volte sempre que quiser cuidar da sua alimenta√ß√£o.\";\n  }\n  \n  // Fallback para mensagens n√£o classificadas corretamente\n  return \"Ol√°! üëã Para uma resposta mais detalhada, descreva melhor sua solicita√ß√£o. Use 'menu' para ver os comandos dispon√≠veis.\";\n}\n\nconst response = generateExpressResponse(messageText.messageText);\n\nreturn [{\n  json: {\n    queueData: queueData,\n    messageData: messageData,\n    response: response,\n    processingTime: Date.now(),\n    estimatedTokens: 100 // Respostas pr√©-definidas usam poucos tokens\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        280
      ],
      "id": "55585eb4-4fbb-4cbd-a72c-90cc2b96ff70",
      "name": "Generate Express Response"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "Dieta Facil Dev",
        "remoteJid": "={{ $json.messageData.phoneNumber.split('@')[0] }}",
        "messageText": "={{ $json.response }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        1080,
        280
      ],
      "id": "f89129c6-12d1-4677-bb4c-076559fdded7",
      "name": "Send Express Response",
      "credentials": {
        "evolutionApi": {
          "id": "8Vyn5rMuwjwiaAUs",
          "name": "Instancia Dev"
        }
      }
    },
    {
      "parameters": {
        "tableId": "message_classifications",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "phone_number",
              "fieldValue": "={{ $('Generate Express Response').item.json.queueData.originalMessage.phoneNumber.split('@')[0] }}"
            },
            {
              "fieldId": "message_text",
              "fieldValue": "={{ $('Generate Express Response').item.json.queueData.originalMessage.messageText }}"
            },
            {
              "fieldId": "message_type",
              "fieldValue": "={{ $('Generate Express Response').item.json.queueData.originalMessage.messageType }}"
            },
            {
              "fieldId": "classification_type",
              "fieldValue": "={{ $('Generate Express Response').item.json.queueData.classification.type }}"
            },
            {
              "fieldId": "confidence",
              "fieldValue": "={{ $('Generate Express Response').item.json.queueData.classification.confidence }}"
            },
            {
              "fieldId": "queue_name",
              "fieldValue": "queue:express"
            },
            {
              "fieldId": "model_assigned",
              "fieldValue": "none"
            },
            {
              "fieldId": "estimated_tokens",
              "fieldValue": "={{ $('Generate Express Response').item.json.queueData.routing.estimatedTokens }}"
            },
            {
              "fieldId": "analysis_data",
              "fieldValue": "={{ $('Generate Express Response').item.json.queueData.analysis }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "completed"
            },
            {
              "fieldId": "actual_tokens_used",
              "fieldValue": "={{ $('Generate Express Response').item.json.estimatedTokens }}"
            },
            {
              "fieldId": "actual_cost_usd",
              "fieldValue": "0.0001"
            },
            {
              "fieldId": "processing_time_ms",
              "fieldValue": "={{ Date.now() - $('Generate Express Response').item.json.processingTime }}"
            },
            {
              "fieldId": "processed_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1280,
        280
      ],
      "id": "493a49e4-2959-43d5-b6a3-02122291f9cc",
      "name": "Create Classification Log",
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "incr",
        "key": "metrics:express:completed"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1500,
        280
      ],
      "id": "aa62bff6-ad09-4410-801d-37bec4fa1bef",
      "name": "Increment Completed Metric",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "metrics:express:last_processed",
        "value": "={{ Date.now() }}",
        "keyType": "string"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        1500,
        500
      ],
      "id": "6eef2776-5999-4762-8a6b-50858a22cd7f",
      "name": "Update Last Processed",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds",
              "secondsInterval": 5
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        380,
        280
      ],
      "id": "478f5687-5ebc-4e1c-8958-3b0fd7c81e73",
      "name": "Schedule Trigger"
    }
  ],
  "connections": {
    "Pop Express Queue": {
      "main": [
        [
          {
            "node": "Generate Express Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Express Response": {
      "main": [
        [
          {
            "node": "Send Express Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Express Response": {
      "main": [
        [
          {
            "node": "Create Classification Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Classification Log": {
      "main": [
        [
          {
            "node": "Increment Completed Metric",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increment Completed Metric": {
      "main": [
        [
          {
            "node": "Update Last Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Pop Express Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Pop Express Queue": [
      {
        "json": {
          "propertyName": null
        }
      }
    ]
  },
  "versionId": "78392de2-2e6c-4c0f-a889-35fe3569f0cd",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-05-30T11:31:18.780Z",
      "updatedAt": "2025-05-30T11:31:18.780Z",
      "id": "MkMWJqdLSlMeJZ5k",
      "name": "claude_solution"
    }
  ]
}