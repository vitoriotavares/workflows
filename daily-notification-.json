{
  "createdAt": "2025-06-03T23:46:43.278Z",
  "updatedAt": "2025-06-03T23:46:43.278Z",
  "id": "SUAEb6ll6s6D8S94",
  "name": "Daily Notification",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -20,
        -100
      ],
      "id": "3209189c-30c5-495d-910f-ab988a3dd05d",
      "name": "Daily Trigger 19h"
    },
    {
      "parameters": {
        "operation": "select"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        180,
        -100
      ],
      "id": "7a8f0cd2-d5ba-4288-8ea3-dbf08c6b4437",
      "name": "Get Active Users"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        380,
        -100
      ],
      "id": "ec56bad9-e57f-40e9-b686-bbdc9b175e4b",
      "name": "Split Users"
    },
    {
      "parameters": {
        "operation": "select"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        580,
        -280
      ],
      "id": "21bff3c7-8a3b-4fb4-8b87-6411b7ad97cb",
      "name": "Get Daily Summary"
    },
    {
      "parameters": {
        "operation": "select"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        580,
        80
      ],
      "id": "da1343c8-566a-46fb-975a-8cfae1e5e8b9",
      "name": "Get Daily Meals"
    },
    {
      "parameters": {
        "jsCode": "// Gerar relat√≥rio di√°rio motivacional\nconst user = $('Split Users').item.json;\nconst dailySummary = $('Get Daily Summary').first()?.json || null;\nconst meals = $('Get Daily Meals').all().map(item => item.json);\n\n// Dados padr√£o se n√£o houver resumo\nconst summary = dailySummary || {\n  total_calories: 0,\n  total_protein: 0,\n  total_carbs: 0,\n  total_fat: 0,\n  total_water: 0,\n  total_fiber: 0\n};\n\n// Metas padr√£o do usu√°rio\nconst targets = {\n  calories: user.daily_calorie_target || 2000,\n  protein: user.target_protein || 150,\n  carbs: user.target_carbs || 250,\n  fat: user.target_fat || 67,\n  water: user.target_water || 2000,\n  fiber: user.target_fiber || 25\n};\n\n// Calcular progressos\nconst progress = {\n  calories: Math.round((summary.total_calories / targets.calories) * 100),\n  protein: Math.round((summary.total_protein / targets.protein) * 100),\n  carbs: Math.round((summary.total_carbs / targets.carbs) * 100),\n  fat: Math.round((summary.total_fat / targets.fat) * 100),\n  water: Math.round((summary.total_water / targets.water) * 100),\n  fiber: Math.round((summary.total_fiber / targets.fiber) * 100)\n};\n\n// Fun√ß√£o para gerar sauda√ß√£o baseada no hor√°rio\nfunction getGreeting() {\n  const hour = new Date().getHours();\n  if (hour < 12) return \"üåÖ Bom dia\";\n  if (hour < 18) return \"‚òÄÔ∏è Boa tarde\";\n  return \"üåô Boa noite\";\n}\n\n// Fun√ß√£o para avaliar progresso\nfunction getProgressEmoji(percentage) {\n  if (percentage >= 90 && percentage <= 110) return \"üéØ\";\n  if (percentage >= 70) return \"üëç\";\n  if (percentage >= 50) return \"‚ö°\";\n  return \"üí™\";\n}\n\n// Fun√ß√£o para gerar mensagem motivacional\nfunction getMotivationalMessage(progress, meals) {\n  const mealCount = meals.length;\n  let motivation = \"\";\n  \n  if (mealCount === 0) {\n    motivation = \"Ainda n√£o registrou nenhuma refei√ß√£o hoje? N√£o se preocupe! √â hora de come√ßar a cuidar da sua nutri√ß√£o. Cada pequeno passo conta! üå±\";\n  } else if (mealCount >= 3) {\n    motivation = \"Parab√©ns por manter a consist√™ncia! Voc√™ registrou v√°rias refei√ß√µes hoje. Isso mostra seu comprometimento! üèÜ\";\n  } else {\n    motivation = \"Voc√™ est√° no caminho certo! Continue registrando suas refei√ß√µes para um acompanhamento completo. üìà\";\n  }\n  \n  return motivation;\n}\n\n// Gerar an√°lise de macronutrientes\nfunction analyzeMacros(progress) {\n  let analysis = \"\";\n  \n  if (progress.protein >= 90) {\n    analysis += \"ü•© Prote√≠na: Excelente! Seus m√∫sculos agradecem.\\n\";\n  } else if (progress.protein >= 70) {\n    analysis += \"ü•© Prote√≠na: Bom progresso! Que tal adicionar mais uma fonte?\\n\";\n  } else {\n    analysis += \"ü•© Prote√≠na: Precisa de aten√ß√£o. Inclua ovos, carnes ou leguminosas.\\n\";\n  }\n  \n  if (progress.carbs >= 80 && progress.carbs <= 120) {\n    analysis += \"üçû Carboidratos: Energia equilibrada! Perfeito.\\n\";\n  } else if (progress.carbs < 80) {\n    analysis += \"üçû Carboidratos: Sua energia pode precisar de um refor√ßo saud√°vel.\\n\";\n  } else {\n    analysis += \"üçû Carboidratos: Cuidado para n√£o exagerar na energia.\\n\";\n  }\n  \n  if (progress.water >= 100) {\n    analysis += \"üíß Hidrata√ß√£o: Perfeita! Voc√™ est√° bem hidratado.\\n\";\n  } else if (progress.water >= 70) {\n    analysis += \"üíß Hidrata√ß√£o: Quase l√°! Mais alguns copos de √°gua.\\n\";\n  } else {\n    analysis += \"üíß Hidrata√ß√£o: Aten√ß√£o! Beba mais √°gua ao longo do dia.\\n\";\n  }\n  \n  return analysis;\n}\n\n// Gerar dicas personalizadas\nfunction generateTips(progress, mealCount) {\n  const tips = [];\n  \n  if (progress.protein < 80) {\n    tips.push(\"üí° Dica: Adicione uma fonte de prote√≠na em cada refei√ß√£o (ovos, frango, peixe, leguminosas).\");\n  }\n  \n  if (progress.water < 80) {\n    tips.push(\"üí° Dica: Mantenha uma garrafa de √°gua sempre por perto e beba pequenos goles regularmente.\");\n  }\n  \n  if (mealCount < 3) {\n    tips.push(\"üí° Dica: Tente fazer pelo menos 3 refei√ß√µes por dia para manter seu metabolismo ativo.\");\n  }\n  \n  if (progress.fiber < 70) {\n    tips.push(\"üí° Dica: Inclua mais frutas, verduras e cereais integrais para aumentar as fibras.\");\n  }\n  \n  return tips;\n}\n\n// Construir mensagem completa\nconst greeting = getGreeting();\nconst motivation = getMotivationalMessage(progress, meals);\nconst macroAnalysis = analyzeMacros(progress);\nconst tips = generateTips(progress, meals.length);\n\nlet message = `${greeting}, ${user.name || 'Guerreiro(a) da Nutri√ß√£o'}! üåü\\n\\n`;\n\n// Resumo do dia\nmessage += `üìä **SEU BALAN√áO NUTRICIONAL DE HOJE:**\\n\\n`;\n\nif (meals.length > 0) {\n  message += `üçΩÔ∏è **Refei√ß√µes registradas:** ${meals.length}\\n\\n`;\n  \n  // Progresso das metas\n  message += `üéØ **Progresso das suas metas:**\\n`;\n  message += `${getProgressEmoji(progress.calories)} Calorias: ${summary.total_calories}/${targets.calories} kcal (${progress.calories}%)\\n`;\n  message += `${getProgressEmoji(progress.protein)} Prote√≠nas: ${summary.total_protein}/${targets.protein}g (${progress.protein}%)\\n`;\n  message += `${getProgressEmoji(progress.carbs)} Carboidratos: ${summary.total_carbs}/${targets.carbs}g (${progress.carbs}%)\\n`;\n  message += `${getProgressEmoji(progress.fat)} Gorduras: ${summary.total_fat}/${targets.fat}g (${progress.fat}%)\\n`;\n  message += `${getProgressEmoji(progress.water)} √Ågua: ${summary.total_water}/${targets.water}ml (${progress.water}%)\\n\\n`;\n  \n  // An√°lise de macronutrientes\n  message += `üîç **An√°lise detalhada:**\\n${macroAnalysis}\\n`;\n} else {\n  message += `Ainda n√£o h√° registros de hoje. Que tal come√ßar registrando sua pr√≥xima refei√ß√£o? üçΩÔ∏è\\n\\n`;\n}\n\n// Motiva√ß√£o personalizada\nmessage += `üí™ **Motiva√ß√£o do dia:**\\n${motivation}\\n\\n`;\n\n// Dicas personalizadas\nif (tips.length > 0) {\n  message += `üéØ **Dicas personalizadas para voc√™:**\\n${tips.join('\\n')}\\n\\n`;\n}\n\n// Mensagem final motivacional\nconst finalMotivations = [\n  \"üå± Lembre-se: cada escolha saud√°vel √© um investimento no seu futuro!\",\n  \"‚ú® Voc√™ est√° construindo h√°bitos que transformar√£o sua vida!\",\n  \"üöÄ Pequenos progressos di√°rios levam a grandes transforma√ß√µes!\",\n  \"üíö Seu corpo √© seu templo, continue cuidando dele com amor!\"\n];\n\nconst randomMotivation = finalMotivations[Math.floor(Math.random() * finalMotivations.length)];\nmessage += randomMotivation;\n\n// Verificar se deve enviar notifica√ß√£o (s√≥ se houver algum dado ou for novo usu√°rio)\nconst shouldNotify = meals.length > 0 || !user.last_notification_date || \n  new Date(user.last_notification_date).toDateString() !== new Date().toDateString();\n\nreturn [{\n  json: {\n    user: user,\n    message: message,\n    shouldNotify: shouldNotify,\n    progress: progress,\n    mealCount: meals.length,\n    summary: summary\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        -100
      ],
      "id": "140a2bf9-fa63-4b2c-a71c-3a04c442a2de",
      "name": "Generate Daily Report"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.shouldNotify }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        980,
        -100
      ],
      "id": "900ddb0c-79b8-4561-a78c-6e38211ed6d1",
      "name": "Check Should Notify"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "Dieta F√°cil Homologacao",
        "remoteJid": "={{ $json.user.whatsapp.replace(/^(55\\d{2})9(\\d{8})$/, '$1$2') }}",
        "messageText": "={{ $json.message }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        1200,
        -260
      ],
      "id": "d0972f92-a840-43ee-baa1-f72ff5857212",
      "name": "Send Daily Notification"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "users",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "last_notification_date",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1440,
        -260
      ],
      "id": "851adac6-121d-47e0-a2f4-1c27ca966bc0",
      "name": "Update Notification Date"
    },
    {
      "parameters": {
        "amount": 2,
        "unit": "seconds"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        1440,
        -40
      ],
      "id": "bbff44f7-86fe-434f-bd2b-15d40c85a2df",
      "name": "Wait Between Messages",
      "webhookId": "71a789e6-5280-4a96-91c1-2119bf02333a"
    }
  ],
  "connections": {
    "Daily Trigger 19h": {
      "main": [
        [
          {
            "node": "Get Active Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Active Users": {
      "main": [
        [
          {
            "node": "Split Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Users": {
      "main": [
        [
          {
            "node": "Get Daily Summary",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Daily Meals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Daily Summary": {
      "main": [
        [
          {
            "node": "Generate Daily Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Daily Meals": {
      "main": [
        [
          {
            "node": "Generate Daily Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Daily Report": {
      "main": [
        [
          {
            "node": "Check Should Notify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Should Notify": {
      "main": [
        [
          {
            "node": "Send Daily Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Daily Notification": {
      "main": [
        [
          {
            "node": "Update Notification Date",
            "type": "main",
            "index": 0
          },
          {
            "node": "Wait Between Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "e6d53574-ed18-4dbe-964a-2cbeed135eab",
  "triggerCount": 0,
  "tags": []
}