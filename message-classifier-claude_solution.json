{
  "createdAt": "2025-06-03T00:57:04.957Z",
  "updatedAt": "2025-06-09T11:25:31.666Z",
  "id": "idMT9YPONhIw0lv6",
  "name": "Message Classifier",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "dieta-classifier",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -920,
        -140
      ],
      "id": "7f65f01a-81d0-4ca8-b703-99599fbc48a3",
      "name": "Webhook Classifier",
      "webhookId": "c9c8cbda-9846-4930-ad4a-9b248eb7f103"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "msg-data",
              "name": "messageData",
              "value": "={{ {\n  phoneNumber: $('Webhook Classifier').item.json.body.data.key.remoteJid,\n  messageType: $('Webhook Classifier').item.json.body.data.messageType,\n  messageText: (() => {\n    const webhook = $('Webhook Classifier').item.json.body.data;\n    \n    // Texto direto\n    if (webhook.message?.conversation) return webhook.message.conversation;\n    if (webhook.message?.extendedTextMessage?.text) return webhook.message.extendedTextMessage.text;\n    \n    // Áudio transcrito (só se o node foi executado)\n    try {\n      if ($('Audio Transcription').all().length > 0) {\n        return $('Audio Transcription').last().json?.audio?.text || '';\n      }\n    } catch (e) {\n      // Node não executado\n    }\n    \n    return '';\n  })(),\n  imageCaption: $('Webhook Classifier').item.json.body.data.message?.imageMessage?.caption || '',\n  hasAudio: $('Webhook Classifier').item.json.body.data.messageType === 'audioMessage',\n  hasImage: $('Webhook Classifier').item.json.body.data.messageType === 'imageMessage',\n  timestamp: $('Webhook Classifier').item.json.body.data.messageTimestamp,\n  pushName: $('Webhook Classifier').item.json.body.data.pushName,\n  userId: $('Load User').item.json.id,\n  imageMessage: $('Webhook Classifier').item.json.body.data.message?.imageMessage,\n  base64: $('Webhook Classifier').item.json.body.data.message.base64\n} }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1840,
        -160
      ],
      "id": "9a26609b-66b5-4209-8f7e-3944b87cf460",
      "name": "Extract Message Data"
    },
    {
      "parameters": {
        "jsCode": "// Classificador inteligente de mensagens\nconst messageData = $('Extract Message Data').first().json.messageData;\nconst messageText = (messageData.messageText || messageData.imageCaption || '').toLowerCase().trim();\n\n// Patterns para classificação\nconst patterns = {\n  EXPRESS: [\n    // Cumprimentos básicos\n    /^(oi|olá|hey|e aí|salve|bom dia|boa tarde|boa noite)/i,\n    /^(como (está|vai|anda)|tudo bem|beleza|tranquilo)/i,\n    \n    // Confirmações simples\n    /^(ok|okay|entendi|beleza|show|perfeito|legal|valeu)/i,\n    /^(obrigad|brigad|vlw|thanks)/i,\n    \n    // Navegação/Comandos\n    /^(menu|ajuda|help|comandos|início|start)/i,\n    /^(cancelar|sair|parar|tchau|até)/i,\n    \n    // Status muito simples\n    /^(como estou|status)/i\n  ],\n  \n  STANDARD: [\n    // Água simples\n    /^tomei \\d+ml/i,\n    /^bebi \\d+ml/i,\n    /^\\d+ml de água/i,\n    /(água|hidrat)/i,\n    \n    // Consultas de resumo\n    /^(resumo|como estamos|minhas metas)/i,\n    /^(total de hoje|quanto (consumi|bebi))/i,\n    \n    // Perguntas educativas simples\n    /(posso comer|qual melhor|é bom|faz mal)/i,\n    /(dica|sugestão|recomend)/i,\n    /(quantas calorias|macro)/i\n  ],\n  \n  NUTRITION: [\n    // Registro de refeições\n    /(comi|almocei|jantei|lanchei|tomei café)/i,\n    /(café da manhã|almoço|jantar|lanche)/i,\n    \n    // Quantidades específicas\n    /\\d+g|\\d+ gramas/i,\n    /\\d+ unidade|\\d+ fatia|\\d+ colher/i,\n    /\\d+ml.*[^água]/i, // ml que não seja de água\n    \n    // Alimentos específicos com detalhes\n    /(proteína|carboidrato|caloria|fibra).*\\d/i,\n    /(arroz|feijão|carne|frango|peixe|ovo|pão|leite).*\\d/i,\n    \n    // Análises complexas\n    /(relatório|análise completa|feedback|balanço)/i,\n    /(déficit|superávit|meta diária)/i\n  ]\n};\n\n// Função para classificar\nfunction classifyMessage(text, messageData) {\n  // Casos especiais prioritários\n  if (messageData.hasImage) {\n    return 'VISION';\n  }\n  \n  if (messageData.hasAudio) {\n    return 'NUTRITION'; // Áudio geralmente é para registrar refeições\n  }\n  \n  // Se mensagem muito curta (< 3 palavras), provavelmente é EXPRESS\n  const wordCount = text.split(/\\s+/).length;\n  if (wordCount === 1 && text.length < 10 && !/^(resumo|água|metas|status)$/i.test(text)) {\n    return 'EXPRESS';\n  }\n  \n  // Verificar patterns por ordem de prioridade\n  for (const [category, patternList] of Object.entries(patterns)) {\n    for (const pattern of patternList) {\n      if (pattern.test(text)) {\n        return category;\n      }\n    }\n  }\n  \n  // Heurísticas adicionais\n  \n  // Se contém números + unidades de medida = NUTRITION\n  if (/\\d+.*?(g|ml|mg|kg|unidade|fatia|colher|xícara|copo)/i.test(text)) {\n    return 'NUTRITION';\n  }\n  \n  // Se lista vários alimentos = NUTRITION\n  const foodWords = text.match(/(arroz|feijão|carne|frango|peixe|ovo|pão|leite|queijo|presunto|salada|tomate|alface|batata|macarrão|massa|suco|café|chá)/gi);\n  if (foodWords && foodWords.length >= 2) {\n    return 'NUTRITION';\n  }\n  \n  // Se mensagem longa (> 50 chars) e não foi classificada = NUTRITION\n  if (text.length > 50) {\n    return 'NUTRITION';\n  }\n  \n  // Default para mensagens médias\n  return 'STANDARD';\n}\n\n// Classificar a mensagem\nconst classification = classifyMessage(messageText, messageData);\n\n// Configurações por tipo\nconst config = {\n  EXPRESS: {\n    queue: 'queue:express',\n    model: 'gpt-4o-mini',\n    priority: 1,\n    timeout: 3000,\n    maxRetries: 2,\n    estimatedTokens: 150\n  },\n  STANDARD: {\n    queue: 'queue:standard', \n    model: 'gpt-4o-mini',\n    priority: 2,\n    timeout: 8000,\n    maxRetries: 3,\n    estimatedTokens: 500\n  },\n  NUTRITION: {\n    queue: 'queue:nutrition',\n    model: 'gpt-4o',\n    priority: 3,\n    timeout: 30000,\n    maxRetries: 5,\n    estimatedTokens: 2000\n  },\n  VISION: {\n    queue: 'queue:vision',\n    model: 'gpt-4o',\n    priority: 4,\n    timeout: 45000,\n    maxRetries: 3,\n    estimatedTokens: 3000\n  }\n};\n\n// Detectar situações especiais\nconst specialFlags = {\n  isGreeting: /^(oi|olá|bom dia|boa tarde|boa noite)/i.test(messageText),\n  isThankYou: /^(obrigad|brigad|valeu|thanks)/i.test(messageText),\n  isQuestion: messageText.includes('?'),\n  hasNumbers: /\\d/.test(messageText),\n  isList: messageText.includes('\\n') || (messageText.match(/,/g) || []).length > 2\n};\n\nreturn [{\n  json: {\n    originalMessage: {\n      phoneNumber: messageData.phoneNumber,\n      messageType: messageData.messageType,\n      imageMessage: messageData.imageMessage,\n      imageCaption: messageData.imageCaption,\n      pushName: messageData.pushName,\n      messageText: messageData\n    },\n    classification: {\n      type: classification,\n      confidence: getConfidence(messageText, classification),\n      reasoning: getReasoningLog(messageText, classification)\n    },\n    routing: config[classification],\n    analysis: {\n      messageLength: messageText.length,\n      wordCount: messageText.split(/\\s+/).length,\n      specialFlags: specialFlags,\n      processingTime: new Date().toISOString()\n    }\n  }\n}];\n\n// Função para calcular confiança na classificação\nfunction getConfidence(text, classification) {\n  const wordCount = text.split(/\\s+/).length;\n  \n  if (classification === 'EXPRESS' && wordCount <= 2) return 0.95;\n  if (classification === 'VISION') return 1.0;\n  if (classification === 'NUTRITION' && /\\d+.*?(g|ml|kg)/i.test(text)) return 0.9;\n  \n  return 0.75; // Confiança padrão\n}\n\n// Log do raciocínio para debug\nfunction getReasoningLog(text, classification) {\n  return {\n    textLength: text.length,\n    wordCount: text.split(/\\s+/).length,\n    hasNumbers: /\\d/.test(text),\n    hasUnits: /\\d+.*?(g|ml|kg|unidade)/i.test(text),\n    classification: classification\n  };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2020,
        -160
      ],
      "id": "f3ae3424-067a-4830-89e8-5990c3ad81fe",
      "name": "Message Classifier Logic"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.classification.type }}",
                    "rightValue": "EXPRESS",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "6b4aa7dc-a848-4fc3-bae5-79637627647b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "express"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.classification.type }}",
                    "rightValue": "STANDARD",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "edd96ff2-73ef-4062-9f00-e56e7454c2fb"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "standard"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.classification.type }}",
                    "rightValue": "NUTRITION",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "7f9ae7c7-28cc-4578-a874-0a7298a3b62e"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "nutrition"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.classification.type }}",
                    "rightValue": "VISION",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "9b69820d-82da-4a01-8a99-4eee170b7ebe"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "vision"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2220,
        -180
      ],
      "id": "8fe913de-6025-4878-bf12-7d727276148d",
      "name": "Route by Classification"
    },
    {
      "parameters": {
        "operation": "push",
        "list": "queue:express",
        "messageData": "={{ JSON.stringify($json) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2420,
        -480
      ],
      "id": "91526c13-b7fe-4fa9-917b-610e3a7296f0",
      "name": "Queue Express",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "queue:standard",
        "messageData": "={{ JSON.stringify($json) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2420,
        -280
      ],
      "id": "5582d8a6-c7a5-4d0f-88ea-00d9f0b65348",
      "name": "Queue Standard",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "queue:vision",
        "messageData": "={{ JSON.stringify($json) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2420,
        140
      ],
      "id": "c21a9cda-2d80-480e-bf70-052c67c411d1",
      "name": "Queue Vision",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "Dieta Facil Dev",
        "remoteJid": "={{ $json.originalMessage.phoneNumber.split('@')[0] }}",
        "messageText": "Recebido! ⚡ Processando sua mensagem...",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2620,
        -480
      ],
      "id": "d9701fca-29d9-46c7-ac4b-4adff843e5ac",
      "name": "Quick ACK Express",
      "credentials": {
        "evolutionApi": {
          "id": "8Vyn5rMuwjwiaAUs",
          "name": "Instancia Dev"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "Dieta Facil Dev",
        "remoteJid": "={{ $json.originalMessage.phoneNumber.split('@')[0] }}",
        "messageText": "Analisando sua consulta... 🔍",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2620,
        -280
      ],
      "id": "a5f281f6-cfac-416e-89b8-8be2a3afba59",
      "name": "Quick ACK Standard",
      "credentials": {
        "evolutionApi": {
          "id": "8Vyn5rMuwjwiaAUs",
          "name": "Instancia Dev"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "Dieta Facil Dev",
        "remoteJid": "={{ $json.originalMessage.phoneNumber.split('@')[0] }}",
        "messageText": "Calculando seus nutrientes... 🧮 Aguarde alguns segundos.",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2620,
        -80
      ],
      "id": "3315cabc-2161-418a-9a6e-8403d0e5c94c",
      "name": "Quick ACK Nutrition",
      "credentials": {
        "evolutionApi": {
          "id": "8Vyn5rMuwjwiaAUs",
          "name": "Instancia Dev"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "Dieta Facil Dev",
        "remoteJid": "={{ $json.originalMessage.phoneNumber.split('@')[0] }}",
        "messageText": "Analisando sua imagem... 📸 Isso pode levar até 30 segundos.",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2620,
        140
      ],
      "id": "164541ad-6980-4288-98ae-6e0f97ce84e2",
      "name": "Quick ACK Vision",
      "credentials": {
        "evolutionApi": {
          "id": "8Vyn5rMuwjwiaAUs",
          "name": "Instancia Dev"
        }
      }
    },
    {
      "parameters": {
        "tableId": "message_classifications",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "phone_number",
              "fieldValue": "={{ $('Extract Message Data').last().json.messageData.phoneNumber }}"
            },
            {
              "fieldId": "message_text",
              "fieldValue": "={{ $('Extract Message Data').last().json.messageData.messageText }}"
            },
            {
              "fieldId": "classification_type",
              "fieldValue": "={{ $('Route by Classification').item.json.classification.type }}"
            },
            {
              "fieldId": "confidence",
              "fieldValue": "={{ $('Route by Classification').item.json.classification.confidence }}"
            },
            {
              "fieldId": "estimated_tokens",
              "fieldValue": "={{ $('Route by Classification').item.json.routing.estimatedTokens }}"
            },
            {
              "fieldId": "queue_name",
              "fieldValue": "={{ $('Route by Classification').item.json.routing.queue }}"
            },
            {
              "fieldId": "model_assigned",
              "fieldValue": "={{ $('Route by Classification').item.json.routing.model }}"
            },
            {
              "fieldId": "analysis_data",
              "fieldValue": "={{ $('Route by Classification').item.json.analysis }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2840,
        -120
      ],
      "id": "a1846a3a-e4b9-49e8-ae03-e884a3673f17",
      "name": "Log Classification",
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "incr",
        "key": "metrics:classifications:total"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3080,
        -120
      ],
      "id": "25544180-1ba3-4447-a26e-0423dceec054",
      "name": "Increment Total Metrics",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "incr",
        "key": "=metrics:classifications:{{ $('Log Classification').item.json.classification_type.toLowerCase() }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3100,
        120
      ],
      "id": "27be1f73-b16b-4eb2-bccd-49849afc3474",
      "name": "Increment Type Metrics",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "queue:nutrition",
        "messageData": "={{ JSON.stringify($json) }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2420,
        -80
      ],
      "id": "31be6449-51eb-4078-ab37-f008c06f5ef7",
      "name": "Queue Nutrition",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "users",
        "filters": {
          "conditions": [
            {
              "keyName": "whatsapp",
              "keyValue": "={{ $json.body.data.key.remoteJid.split('@')[0] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -700,
        -140
      ],
      "id": "6362ec46-9174-4c18-a99b-d38853ccae3a",
      "name": "Load User",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data",
        "binaryPropertyName": "=data",
        "options": {
          "fileName": "file.ogg",
          "mimeType": "application/ogg"
        }
      },
      "id": "4582cbeb-2f85-4c9f-934e-7b23e83c93d7",
      "name": "Convert to File",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1300,
        -40
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3c5ccbc9-69d1-4b13-a7c3-e6945bc8c655",
              "name": "data",
              "value": "={{ $('Webhook Classifier').item.json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "127e75b5-9420-4072-b9ad-abf095b40b15",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1140,
        -40
      ]
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "5b6a7332-1d7b-4365-bc28-c87e4d1d115a",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        1460,
        -40
      ],
      "credentials": {
        "openAiApi": {
          "id": "hDbVS33gRemwNAep",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "52aaf749-fe4f-44e4-880e-15b2bfc027f1",
                    "leftValue": "={{ $('Webhook Classifier').item.json[\"body\"][\"data\"][\"messageType\"] }}",
                    "rightValue": "extendedTextMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "e514e613-fd6a-48bd-b0ae-bae2448c810e",
                    "leftValue": "={{ $('Webhook Classifier').item.json[\"body\"][\"data\"][\"messageType\"] }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook Classifier').item.json[\"body\"][\"data\"][\"messageType\"] }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "3c977ad7-eec0-4b4b-8431-ac6d381dd860"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "audio"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "6bf5a61d-c611-4a9d-9635-91286f9ba056",
                    "leftValue": "={{ $('Webhook Classifier').item.json[\"body\"][\"data\"][\"messageType\"] }}",
                    "rightValue": "imageMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "image"
            }
          ]
        },
        "options": {}
      },
      "id": "5742dfd1-9dd0-4b5f-8f6f-45e6056b4125",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        820,
        -180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "91cdb0d9-b5c4-4868-bf67-d1b393e01795",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        180,
        -160
      ],
      "id": "95d030f5-1e78-48df-9235-299e27f3dad8",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2362d9d5-fd51-4db9-94b7-7263f904bae2",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -480,
        -140
      ],
      "id": "ab98a5d6-1ce8-4a78-8d25-683aab8301ac",
      "name": "If1"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook Classifier').item.json.body.instance }}",
        "remoteJid": "={{ $('Webhook Classifier').item.json.body.data.key.remoteJid.split('@')[0] }}",
        "messageText": "🎉 *Olá! Seja muito bem-vindo(a) ao Dieta Fácil!* 🎉\n\nQue incrível ter você aqui! 🌟\n\nSou seu assistente nutricional inteligente e estou aqui para te ajudar a:\n\n🥗 *Monitorar sua alimentação* com análise de fotos\n📊 *Acompanhar suas metas* nutricionais diárias  \n💪 *Alcançar seus objetivos* de forma saudável\n🤖 *Receber orientações* personalizadas 24/7\n\nPara começarmos nossa jornada juntos, preciso conhecer um pouquinho sobre você! \n\n👇 *Clique no link abaixo para fazer um quiz rápido (2 minutos):*\n\n🔗 https://dietafacil.app.br/quiz\n\nDepois que finalizar, volte aqui e me mande um *\"pronto\"* que vamos começar a cuidar da sua alimentação! \n\n✨ *Sua transformação começa agora!* ✨\n\n_💡 Dica: Depois do cadastro, você pode me enviar fotos dos seus pratos que eu analiso tudo para você!_",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -240,
        40
      ],
      "id": "b4543bac-e766-40cd-b8e4-e1602177bf33",
      "name": "Menssagem Novo user",
      "credentials": {
        "evolutionApi": {
          "id": "8Vyn5rMuwjwiaAUs",
          "name": "Instancia Dev"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "user_subscriptions",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "is_active",
              "condition": "is",
              "keyValue": "True"
            },
            {
              "keyName": "user_id",
              "condition": "eq",
              "keyValue": "={{ $json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -100,
        -160
      ],
      "id": "602cfa67-7da4-4835-aa7f-5d0c63122161",
      "name": "Load Subscription",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "={{ $('Webhook Classifier').item.json.body.instance }}",
        "remoteJid": "={{ $('Webhook Classifier').item.json.body.data.key.remoteJid.split('@')[0] }}",
        "messageText": "🚨 Oi! Parece que você ainda não tem acesso ativo ao Dieta Fácil.\n\nMas a boa notícia é que dá pra voltar (ou começar) agora mesmo! 😊\n\n💡 Com o Dieta Fácil, você desbloqueia:\n✅ Planos personalizados para seus objetivos\n📸 Contador de calorias por foto (com IA)\n📊 Acompanhamento inteligente de macros e calorias\n💬 Suporte direto com especialistas\n\n🎁 Garanta seu acesso agora:\n🔹 Plano Mensal\nhttps://checkout.dietafacil.app.br/subscribe/assinatura-dieta-facil-plano-mensal\n🔹 Plano Trimestral\nhttps://checkout.dietafacil.app.br/subscribe/assinatura-dieta-facil-plano-trimestral\n🔹 Plano Anual\nhttps://checkout.dietafacil.app.br/subscribe/assinatura-dieta-facil-plano-anual\n\n⏱ Comece hoje mesmo e dê o próximo passo rumo ao seu resultado 💪",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        660,
        20
      ],
      "id": "1461ceae-af20-40d1-92db-7c6128179cf7",
      "name": "Menssagem Novo user1",
      "credentials": {
        "evolutionApi": {
          "id": "8Vyn5rMuwjwiaAUs",
          "name": "Instancia Dev"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "65dfa695-9b2d-48d5-bbbf-527c290d61ba",
              "name": "audio.text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1640,
        -40
      ],
      "id": "808b7b83-2d1e-443e-a991-2072c6d8983d",
      "name": "Audio Transcription"
    }
  ],
  "connections": {
    "Webhook Classifier": {
      "main": [
        [
          {
            "node": "Load User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Message Data": {
      "main": [
        [
          {
            "node": "Message Classifier Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Classifier Logic": {
      "main": [
        [
          {
            "node": "Route by Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Classification": {
      "main": [
        [
          {
            "node": "Queue Express",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Queue Standard",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Queue Nutrition",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Queue Vision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Queue Express": {
      "main": [
        [
          {
            "node": "Quick ACK Express",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Queue Standard": {
      "main": [
        [
          {
            "node": "Quick ACK Standard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Queue Vision": {
      "main": [
        [
          {
            "node": "Quick ACK Vision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quick ACK Express": {
      "main": [
        [
          {
            "node": "Log Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quick ACK Standard": {
      "main": [
        [
          {
            "node": "Log Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quick ACK Nutrition": {
      "main": [
        [
          {
            "node": "Log Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Quick ACK Vision": {
      "main": [
        [
          {
            "node": "Log Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Classification": {
      "main": [
        [
          {
            "node": "Increment Total Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increment Total Metrics": {
      "main": [
        [
          {
            "node": "Increment Type Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Queue Nutrition": {
      "main": [
        [
          {
            "node": "Quick ACK Nutrition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load User": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Extract Message Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Message Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Message Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Audio Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Menssagem Novo user1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Load Subscription",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Menssagem Novo user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Subscription": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Audio Transcription": {
      "main": [
        [
          {
            "node": "Extract Message Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Webhook Classifier": [
      {
        "json": {
          "headers": {
            "host": "n8n.listaespera.dev.br",
            "user-agent": "axios/1.7.9",
            "content-length": "14095",
            "accept-encoding": "gzip, compress, deflate, br",
            "content-type": "application/json",
            "x-forwarded-for": "5.78.96.92",
            "x-forwarded-host": "n8n.listaespera.dev.br",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "1fa9f2953d4b",
            "x-real-ip": "5.78.96.92"
          },
          "params": {},
          "query": {},
          "body": {
            "event": "messages.upsert",
            "instance": "Dieta Facil Dev",
            "data": {
              "key": {
                "remoteJid": "558596122854@s.whatsapp.net",
                "fromMe": false,
                "id": "82B427FE84EF33FFC937A1543A7A4241"
              },
              "pushName": "Gustavo Gadelha",
              "status": "DELIVERY_ACK",
              "message": {
                "imageMessage": {
                  "url": "https://mmg.whatsapp.net/v/t62.7118-24/30759211_678769391798595_67496946960258188_n.enc?ccb=11-4&oh=01_Q5Aa1gEy-nkrTFjBFNAyZVnD6C9qvLKiMnPD5TgYxz8AYAWKKQ&oe=686AD12D&_nc_sid=5e03e0&mms3=true",
                  "mimetype": "image/jpeg",
                  "caption": "Minha janta",
                  "fileSha256": "3OqF3XYe4ZZ++LtbYxcoHozVef9mGKV9HmKzJVtlWhk=",
                  "fileLength": "8568",
                  "height": 224,
                  "width": 224,
                  "mediaKey": "iMXqWG23e37ALDtJiovifLW/Olcx4qRkZ3fshkeLeWQ=",
                  "fileEncSha256": "5xoCGndq7G1tIgJxXWivnAqe+cyE5aV/O6imEL9D6qU=",
                  "directPath": "/v/t62.7118-24/30759211_678769391798595_67496946960258188_n.enc?ccb=11-4&oh=01_Q5Aa1gEy-nkrTFjBFNAyZVnD6C9qvLKiMnPD5TgYxz8AYAWKKQ&oe=686AD12D&_nc_sid=5e03e0",
                  "mediaKeyTimestamp": "1749249845",
                  "jpegThumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABsbGxscGx4hIR4qLSgtKj04MzM4PV1CR0JHQl2NWGdYWGdYjX2Xe3N7l33gsJycsOD/2c7Z//////////////8BGxsbGxwbHiEhHiotKC0qPTgzMzg9XUJHQkdCXY1YZ1hYZ1iNfZd7c3uXfeCwnJyw4P/Zztn////////////////CABEIAEgASAMBIgACEQEDEQH/xAAwAAADAQEBAQAAAAAAAAAAAAAAAwQCBQEGAQADAQEAAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAAVuX3B1YnY2KfulrejWISgmVmDlfu1R769XXNst9NK5WqTnCiwx7hsT10UuNTY22iP6DhC5Q8U9N8zc7dqfLKnze6Q/jWYioisCJgAxgDZQFRN6EUoAP/xAAjEAACAgIBBAMBAQAAAAAAAAABAgADERIhBCJBURATMWEy/9oACAEBAAE/AAW9wf0zasfrCG2mG5fCRi7+MTpl1cn0I5sMcM3Ewfc1n15jotajHMVgo/xFt7jxxEU/oMyWHIgrwZiYELBDyMgyvLsO3CQqd9VcGUU/Y5Uw9GVUFGwYi53VgNh+Gak5mWMw01Pkz7LK2wGlfUWI2cSrrCp4WDqrLAQrS+x68KDyZT1eXwTiBRCogTullHOZ9ZlVZHiU19xwP2dcdbf6BErDHJbEDjxAWPiKhyCTCMiNUHHoxKQBFQVVFpaUcnaPUB3JEUQY+PEWJOrt7NBDVMawMBBZC59xWJaKRrnMNun5CdjkziMFm5gY+5tAeBFIMdFIBA8RQeR8ET//xAAdEQACAwACAwAAAAAAAAAAAAAAAQIQERIhMTJR/9oACAECAQE/AOZHZHB/RdIcUzGQ9TTTlUal1g26QiT1mukLw7//xAAeEQEAAgICAwEAAAAAAAAAAAABABEQEgJREyExQf/aAAgBAwEBPwDynU3Zty7j7lQ4coFFM1msTDLlr8gn6YcBREMuf//Z"
                },
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "f4fA42R/YvWBEQ==",
                    "senderTimestamp": "1748476085",
                    "recipientKeyHash": "25ARt7H/PsYjMw==",
                    "recipientTimestamp": "1748695529"
                  },
                  "deviceListMetadataVersion": 2,
                  "messageSecret": "xOxjbj2wI7Te41HILPU0on7fmQ5YhLEj8Mt8WxEh990="
                },
                "base64": ""
              },
              "contextInfo": null,
              "messageType": "imageMessage",
              "messageTimestamp": 1749249846,
              "instanceId": "a97632bb-87d5-43b3-a889-af416de9c2b1",
              "source": "android"
            },
            "destination": "https://n8n.listaespera.dev.br/webhook/dieta-classifier",
            "date_time": "2025-06-06T19:44:06.482Z",
            "sender": "558591885354@s.whatsapp.net",
            "server_url": "http://evo-b8sococ0ko0ko8w4o8sko00o.5.78.96.92.sslip.io",
            "apikey": "A459138BBBCE-4C06-B039-28FF9462296D"
          },
          "webhookUrl": "https://n8n.listaespera.dev.br/webhook/dieta-classifier",
          "executionMode": "production"
        }
      }
    ]
  },
  "versionId": "5de5f2e4-235b-42dd-aa59-505b647a3714",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-05-30T11:31:18.780Z",
      "updatedAt": "2025-05-30T11:31:18.780Z",
      "id": "MkMWJqdLSlMeJZ5k",
      "name": "claude_solution"
    }
  ]
}