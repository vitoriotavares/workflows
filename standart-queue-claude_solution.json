{
  "createdAt": "2025-06-10T13:25:19.504Z",
  "updatedAt": "2025-06-11T21:56:01.313Z",
  "id": "YesuSWWsP89lUcsG",
  "name": "Standart Queue",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "operation": "pop",
        "list": "queue:standard",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        160,
        60
      ],
      "id": "82e55878-de4a-4f8f-acbe-0f109f78496f",
      "name": "Pop Standard Queue",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first()?.json;\n\nif (!inputData || !inputData.propertyName) {\n console.log('Express Consumer: Nenhuma mensagem na fila');\n return []; // Termina execuÃ§Ã£o sem erro\n}\n// Parse da mensagem da fila\nconst queueData = $input.first().json.propertyName;\nconst messageData = queueData.originalMessage;\nconst classification = queueData.classification;\nconst routing = queueData.routing;\n\nreturn [{\n  json: {\n    queueData: queueData,\n    messageData: messageData,\n    messageText: messageData.messageText || messageData.imageCaption || '',\n    phoneNumber: messageData.phoneNumber,\n    processingStartTime: Date.now()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        60
      ],
      "id": "d60c6d57-d836-4e97-9108-9606cbc3434e",
      "name": "Parse Standard Message"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "users",
        "filters": {
          "conditions": [
            {
              "keyName": "whatsapp",
              "keyValue": "={{ $json.phoneNumber.split('@')[0] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        560,
        60
      ],
      "id": "0a801c45-23fb-44b5-8087-5322d23c864a",
      "name": "Load User Data",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "user-exists",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        760,
        60
      ],
      "id": "bd726952-82d6-452e-bd44-ef45434fbb77",
      "name": "Check User Exists"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{\n  ['bebi', 'tomei', 'engoli'].some(palavra => \n    $('Parse Standard Message').item.json.messageText.messageText.toLowerCase().includes(palavra)\n  )\n}}",
                    "rightValue": "bebi",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "a43e05d0-3405-411a-91dd-971b62f519ab"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "water"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Parse Standard Message').item.json.messageText.messageText.toLowerCase() }}",
                    "rightValue": "resumo",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "summary"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Parse Standard Message').item.json.messageText.messageText }}",
                    "rightValue": "?",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "question"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        960,
        -40
      ],
      "id": "d1af2c9c-6e34-4e0d-9827-64005cdd085a",
      "name": "Route Standard Type"
    },
    {
      "parameters": {
        "jsCode": "// Processar registro de Ã¡gua\nconst messageText = $('Parse Standard Message').item.json.messageText;\nconst userData = $('Load User Data').item.json;\n\n// Extrair quantidade de Ã¡gua\nconst waterMatch = messageText.messageText.match(/\\b(\\d+)\\s*ml/i);\nconst waterAmount = waterMatch ? parseInt(waterMatch[1]) : 0;\n\nif (waterAmount === 0) {\n  throw new Error('NÃ£o foi possÃ­vel identificar a quantidade de Ã¡gua');\n}\n\nreturn [{\n  json: {\n    waterAmount: waterAmount,\n    userId: userData.id,\n    messageText: messageText,\n    processingType: 'water'\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1140,
        -260
      ],
      "id": "ab1c1209-b861-400f-810e-a484e1c6380f",
      "name": "Process Water Intake"
    },
    {
      "parameters": {
        "tableId": "water_logs",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "diary_day_id",
              "fieldValue": "={{ $json.diary_day_id }}"
            },
            {
              "fieldId": "amount_ml",
              "fieldValue": "={{ $('Process Water Intake').item.json.waterAmount }}"
            },
            {
              "fieldId": "time_consumed",
              "fieldValue": "={{ $now.setZone('America/Buenos_Aires').toFormat('yyyy-MM-dd HH:mm:ss') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1460,
        -260
      ],
      "id": "93eeb73f-c761-4036-94bb-387f2bacf15d",
      "name": "Save Water Log",
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "daily_summary",
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $('Load User Data').item.json.id }}"
            },
            {
              "keyName": "date",
              "keyValue": "={{ $now.setZone('America/Buenos_Aires').toFormat('yyyy-MM-dd') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1240,
        -20
      ],
      "id": "f5917d44-f10b-45ce-9cac-fe9cb35ca1d5",
      "name": "Get Daily Summary",
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "Dieta Facil Dev",
        "remoteJid": "={{ $('Parse Standard Message').item.json.phoneNumber.split('@')[0] }}",
        "messageText": "={{ $json.output.message }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        2360,
        100
      ],
      "id": "a3e8f621-3c8f-4f31-9fd3-5275a5e770ee",
      "name": "Send Standard Response",
      "credentials": {
        "evolutionApi": {
          "id": "8Vyn5rMuwjwiaAUs",
          "name": "Instancia Dev"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "Dieta FÃ¡cil Homologacao",
        "remoteJid": "={{ $('Parse Standard Message').item.json.phoneNumber.split('@')[0] }}",
        "messageText": "Ops! ðŸ˜… Parece que vocÃª ainda nÃ£o fez o questionÃ¡rio de anamnese.\n\nPara eu poder ajudar vocÃª adequadamente, preciso conhecer seus dados como peso, altura, objetivos e preferÃªncias alimentares.\n\nðŸ‘† Acesse: https://dietafacil.app.br\n\nApÃ³s o questionÃ¡rio, estarei pronto para ser seu assistente nutricional personalizado! ðŸŽ¯",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        960,
        160
      ],
      "id": "9f8e1b0b-af7f-4a43-bd77-58ca9222c784",
      "name": "Send Registration Required",
      "credentials": {
        "evolutionApi": {
          "id": "8Vyn5rMuwjwiaAUs",
          "name": "Instancia Dev"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "message_classifications",
        "filters": {
          "conditions": [
            {
              "keyName": "phone_number",
              "condition": "eq",
              "keyValue": "={{ $('Check User Exists').item.json.whatsapp }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "status",
              "fieldValue": "completed"
            },
            {
              "fieldId": "actual_tokens_used",
              "fieldValue": "400"
            },
            {
              "fieldId": "actual_cost_usd",
              "fieldValue": "0.0008"
            },
            {
              "fieldId": "processing_time_ms",
              "fieldValue": "={{ Date.now() - $('Parse Standard Message').item.json.processingStartTime }}"
            },
            {
              "fieldId": "completed_at",
              "fieldValue": "={{ new Date().toISOString() }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2220,
        340
      ],
      "id": "80a097c7-9b4e-4428-a7cc-5677c8df02e7",
      "name": "Update Standard Classification",
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "incr",
        "key": "metrics:standard:completed"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        2400,
        340
      ],
      "id": "8137d563-515f-41ed-bae8-5fd9a1ec2f06",
      "name": "Increment Standard Metric",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT get_or_create_diary_day('{{ $json.userId }}') as diary_day_id",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1300,
        -260
      ],
      "id": "c05920df-2dde-4e67-9aac-993b600134d8",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "m8W5D6Ml6jkdbYon",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds",
              "secondsInterval": 10
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -80,
        60
      ],
      "id": "53b36f35-222d-4866-acb7-412842164af3",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1840,
        520
      ],
      "id": "72ef19d6-48fa-4e85-a7b1-c7a904459fb2",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "hDbVS33gRemwNAep",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=VocÃª Ã© o assistente Dieta FÃ¡cil. O usuÃ¡rio registrou {{ $('Process Water Intake').item.json.waterAmount }}ml de Ã¡gua.Responda de forma amigÃ¡vel e motivadora, incluindo:\n1. ConfirmaÃ§Ã£o do registro\n2. ParabÃ©ns pela hidrataÃ§Ã£o\n3. Uma dica sobre importÃ¢ncia da Ã¡gua\nUse emojis e seja conciso (mÃ¡ximo 2 frases)."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        840,
        600
      ],
      "id": "92c4c00e-3e3d-4bd8-9f37-06a0bdcc5d50",
      "name": "Generate Water Response OLD",
      "credentials": {
        "openAiApi": {
          "id": "hDbVS33gRemwNAep",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=VocÃª Ã© o assistente Dieta FÃ¡cil. O usuÃ¡rio registrou {{ $('Process Water Intake').item.json.waterAmount }}ml de Ã¡gua.Responda de forma amigÃ¡vel e motivadora, incluindo:\n1. ConfirmaÃ§Ã£o do registro\n2. ParabÃ©ns pela hidrataÃ§Ã£o\n3. Uma dica sobre importÃ¢ncia da Ã¡gua\nUse emojis e seja conciso (mÃ¡ximo 2 frases).",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1660,
        -260
      ],
      "id": "2c3ee715-9e38-4940-b2d2-b9752f51dbd2",
      "name": "Generate Water Response"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6e3e3d37-f71b-4126-ab11-a0c313922049",
              "name": "output.message",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2100,
        100
      ],
      "id": "03dfd092-8013-4def-a35d-fd837f87739a",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=VocÃª Ã© o assistente Dieta FÃ¡cil. ForneÃ§a um resumo do dia baseado nos dados:\\n\\n{{ JSON.stringify($json) }}\\n\\nApresente de forma visual e motivadora:\\n1. Total de calorias, proteÃ­nas, carboidratos, gorduras\\n2. Consumo de Ã¡gua\\n3. Status em relaÃ§Ã£o Ã s metas\\n4. Uma motivaÃ§Ã£o para continuar\\n\\nUse emojis e formato amigÃ¡vel."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        840,
        980
      ],
      "id": "db4d98d7-9e78-4ce3-b904-dc8b5d1313e9",
      "name": "Generate Summary Response OLD",
      "credentials": {
        "openAiApi": {
          "id": "hDbVS33gRemwNAep",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=VocÃª Ã© o assistente Dieta FÃ¡cil. ForneÃ§a um resumo do dia baseado nos dados:\\n\\n{{ JSON.stringify($json) }}\\n\\nApresente de forma visual e motivadora:\\n1. Total de calorias, proteÃ­nas, carboidratos, gorduras\\n2. Consumo de Ã¡gua\\n3. Status em relaÃ§Ã£o Ã s metas\\n4. Uma motivaÃ§Ã£o para continuar\\n\\nUse emojis e formato amigÃ¡vel.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1520,
        -20
      ],
      "id": "432323e6-f000-4d43-ae1e-0169e6deadb1",
      "name": "Generate Summary Response"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=VocÃª Ã© o assistente Dieta FÃ¡cil especializado em responder dÃºvidas nutricionais.\\n\\nPergunta do usuÃ¡rio: {{ $('Parse Standard Message').item.json.messageText.messageText }}\\n\\nForneÃ§a uma resposta educativa, prÃ¡tica e motivadora. Seja conciso mas informativo. Use emojis quando apropriado.\\n\\nSe a pergunta for sobre um alimento especÃ­fico, inclua informaÃ§Ãµes nutricionais bÃ¡sicas."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        840,
        800
      ],
      "id": "f5f0b948-c7cb-4904-8993-9120bd7a713e",
      "name": "Generate Question Response OLD",
      "credentials": {
        "openAiApi": {
          "id": "hDbVS33gRemwNAep",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=VocÃª Ã© o assistente Dieta FÃ¡cil especializado em responder dÃºvidas nutricionais.\\n\\nPergunta do usuÃ¡rio: {{ $('Parse Standard Message').item.json.messageText.messageText }}\\n\\nForneÃ§a uma resposta educativa, prÃ¡tica e motivadora. Seja conciso mas informativo. Use emojis quando apropriado.\\n\\nSe a pergunta for sobre um alimento especÃ­fico, inclua informaÃ§Ãµes nutricionais bÃ¡sicas.",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1280,
        220
      ],
      "id": "fc7b4800-3380-408f-9abc-8aaa79993ffe",
      "name": "Generate Question Response"
    }
  ],
  "connections": {
    "Pop Standard Queue": {
      "main": [
        [
          {
            "node": "Parse Standard Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Standard Message": {
      "main": [
        [
          {
            "node": "Load User Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load User Data": {
      "main": [
        [
          {
            "node": "Check User Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check User Exists": {
      "main": [
        [
          {
            "node": "Route Standard Type",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Registration Required",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Standard Type": {
      "main": [
        [
          {
            "node": "Process Water Intake",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Daily Summary",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Question Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Water Intake": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Water Log": {
      "main": [
        [
          {
            "node": "Generate Water Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Daily Summary": {
      "main": [
        [
          {
            "node": "Generate Summary Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Standard Response": {
      "main": [
        [
          {
            "node": "Update Standard Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Standard Classification": {
      "main": [
        [
          {
            "node": "Increment Standard Metric",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Save Water Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Pop Standard Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Water Response",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Generate Summary Response",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Generate Question Response",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate Water Response OLD": {
      "main": [
        []
      ]
    },
    "Generate Water Response": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Send Standard Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Summary Response OLD": {
      "main": [
        []
      ]
    },
    "Generate Summary Response": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Question Response OLD": {
      "main": [
        []
      ]
    },
    "Generate Question Response": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "85a16ea6-0b15-475c-91de-ecd2b206afe4",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-05-30T11:31:18.780Z",
      "updatedAt": "2025-05-30T11:31:18.780Z",
      "id": "MkMWJqdLSlMeJZ5k",
      "name": "claude_solution"
    }
  ]
}