{
  "createdAt": "2025-06-02T23:35:50.882Z",
  "updatedAt": "2025-06-11T21:57:41.567Z",
  "id": "77erQLBxH4viT3Fx",
  "name": "Vision Consumer",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "operation": "pop",
        "list": "queue:vision",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -1160,
        800
      ],
      "id": "3484be60-5886-4926-86d9-6bb0c9db6665",
      "name": "Pop Vision Queue",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const inputData = $input.first()?.json;\n\nif (!inputData || !inputData.propertyName) {\n console.log('Express Consumer: Nenhuma mensagem na fila');\n return []; // Termina execução sem erro\n}\n// Parse da mensagem da fila\nconst queueData = $input.first().json.propertyName || '{}';\nconst messageData = queueData.originalMessage;\nconst classification = queueData.classification;\nconst routing = queueData.routing;\n\n// Capturar tempo de início\nconst startTime = Date.now();\n\n// Normalizar número de telefone\nfunction normalizePhoneNumber(phoneNumber) {\n  const cleanNumber = phoneNumber.split('@')[0];\n  // Remove 9 extra de números brasileiros: 5585999028259 -> 558599028259\n  return cleanNumber.replace(/^(55\\d{2})9(\\d{8})$/, '$1$2');\n}\n\n// Extrair dados da imagem\nconst imageData = messageData.imageMessage || messageData.message?.imageMessage;\nconst imageCaption = messageData.imageCaption || messageData.message?.imageMessage?.caption || '';\nconst normalizedPhone = normalizePhoneNumber(messageData.phoneNumber);\n\n// Determinar tipo de análise de imagem\nfunction analyzeVisionRequest(caption, imageData) {\n  const lowerCaption = (caption || '').toLowerCase().trim();\n  \n  // Tipos de análise de visão\n  const analysisType = {\n    FOOD_IDENTIFICATION: 'identificacao_alimento',\n    MEAL_ANALYSIS: 'analise_prato',\n    PORTION_ESTIMATION: 'estimativa_porcao',\n    NUTRITION_BREAKDOWN: 'quebra_nutricional',\n    MEAL_LOGGING: 'registro_refeicao'\n  };\n  \n  // Detectar intenção baseada na legenda\n  if (/(quanto|quantas|calorias|kcal|valor nutricional)/i.test(lowerCaption)) {\n    return {\n      type: analysisType.NUTRITION_BREAKDOWN,\n      complexity: 'high',\n      estimatedTokens: 3500\n    };\n  }\n  \n  if (/(porção|quantidade|tamanho|peso)/i.test(lowerCaption)) {\n    return {\n      type: analysisType.PORTION_ESTIMATION,\n      complexity: 'medium',\n      estimatedTokens: 2500\n    };\n  }\n  \n  if (/(o que é|que comida|identifica|reconhece)/i.test(lowerCaption)) {\n    return {\n      type: analysisType.FOOD_IDENTIFICATION,\n      complexity: 'medium',\n      estimatedTokens: 2000\n    };\n  }\n  \n  if (/(comi|almocei|jantei|lanchei|registra)/i.test(lowerCaption)) {\n    return {\n      type: analysisType.MEAL_LOGGING,\n      complexity: 'high',\n      estimatedTokens: 4000\n    };\n  }\n  \n  // Default para análise completa do prato\n  return {\n    type: analysisType.MEAL_ANALYSIS,\n    complexity: 'high',\n    estimatedTokens: 3000\n  };\n}\n\n// Extrair contexto temporal\nfunction extractTimeContext(caption) {\n  const now = new Date();\n  const hour = now.getHours();\n  \n  // Detectar tipo de refeição por horário se não especificado\n  let mealType = null;\n  if (/(café da manhã|manhã)/i.test(caption)) mealType = 'cafe_manha';\n  else if (/(almoço|meio dia)/i.test(caption)) mealType = 'almoco';\n  else if (/(lanche|tarde)/i.test(caption)) mealType = 'lanche';\n  else if (/(jantar|janta|noite)/i.test(caption)) mealType = 'jantar';\n  else {\n    // Inferir por horário\n    if (hour >= 5 && hour < 10) mealType = 'cafe_manha';\n    else if (hour >= 10 && hour < 15) mealType = 'almoco';\n    else if (hour >= 15 && hour < 19) mealType = 'lanche';\n    else mealType = 'jantar';\n  }\n  \n  return {\n    mealType: mealType,\n    timeOfDay: now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' }),\n    dayPeriod: hour < 12 ? 'manhã' : hour < 18 ? 'tarde' : 'noite'\n  };\n}\n\nconst visionAnalysis = analyzeVisionRequest(imageCaption, imageData);\nconst timeContext = extractTimeContext(imageCaption);\n\n// Verificar se há dados de imagem válidos\nif (!imageData || !imageData.url) {\n  throw new Error('Imagem não encontrada ou inválida');\n}\n\nreturn [{\n  json: {\n    queueData: queueData,\n    messageData: messageData,\n    imageData: imageData,\n    imageCaption: imageCaption,\n    visionAnalysis: visionAnalysis,\n    timeContext: timeContext,\n    startTime: startTime,\n    needsGPTVision: true,\n    normalizedPhone: normalizedPhone,\n    whatsappNumber: normalizedPhone\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        800
      ],
      "id": "999d8d26-fee4-4a37-8fe4-4fb9eae8c1f2",
      "name": "Analyze Vision Request"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "users",
        "filters": {
          "conditions": [
            {
              "keyName": "whatsapp",
              "keyValue": "={{ $json.normalizedPhone.replace(/^(55\\\\d{2})(\\\\d{8})$/, '$1' + '9' + '$2') }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -420,
        800
      ],
      "id": "a551a22b-c6b9-49b9-9843-0ed5e8981977",
      "name": "Get User Profile",
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "daily_summary",
        "filters": {
          "conditions": [
            {
              "keyName": "user_id",
              "keyValue": "={{ $('Get User Profile').first()?.json?.id || 'no-user' }}"
            },
            {
              "keyName": "date",
              "keyValue": "={{ new Date().toISOString().split('T')[0] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -420,
        1000
      ],
      "id": "69f41eac-d93a-4ed8-b925-c85ae4773d4d",
      "name": "Get Daily Summary",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Combinar dados do usuário e resumo diário\nconst visionData = $('Format Image for OpenAI').first().json;\nconst userProfile = $('Get User Profile').first()?.json || null;\nconst dailySummary = $('Get Daily Summary').first()?.json || null;\n\n// Dados padrão se usuário não existe\nconst defaultProfile = {\n  id: null,\n  name: visionData.messageData.pushName || 'Usuário',\n  email: null,\n  whatsapp: visionData.normalizedPhone,\n  age: 30,\n  weight: 70,\n  height: 170,\n  gender: 'unspecified',\n  activity_level: 'moderate',\n  goal: 'maintain',\n  daily_calorie_target: 2000,\n  target_protein: 150,\n  target_carbs: 250,\n  target_fat: 67,\n  target_water: 2000,\n  target_fiber: 25\n};\n\n// Dados padrão para resumo diário\nconst defaultDailySummary = {\n  total_calories: 0,\n  total_protein: 0,\n  total_carbs: 0,\n  total_fat: 0,\n  total_water: 0,\n  total_fiber: 0\n};\n\nconst profile = userProfile || defaultProfile;\nconst dailyData = dailySummary || defaultDailySummary;\n\n// Função para gerar barra de progresso visual\nfunction generateProgressBar(current, target) {\n  const percentage = Math.min(Math.round((current / target) * 100), 100);\n  const filledBars = Math.round(percentage / 10);\n  const emptyBars = 10 - filledBars;\n  \n  let bar = \"▓\".repeat(filledBars) + \"░\".repeat(emptyBars);\n  let status = \"\";\n  \n  if (percentage < 30) status = \"🔴 Baixo\";\n  else if (percentage < 70) status = \"🟡 Médio\";\n  else if (percentage < 90) status = \"🟢 Bom\";\n  else if (percentage <= 110) status = \"✅ Ideal\";\n  else status = \"🔵 Acima\";\n  \n  return `[${bar}] ${status}`;\n}\n\n// Construir prompt para GPT-4o Vision baseado no tipo de análise (SEM DADOS TÉCNICOS)\nfunction buildVisionPrompt(analysisType, timeContext, profile, dailyData, imageCaption) {\n  const baseContext = `\nVocê é o Dieta Fácil, um assistente nutricional especializado em análise de imagens de alimentos.\n\n👤 **PERFIL DO USUÁRIO:**\n• Nome: ${profile.name}\n• Idade: ${profile.age} anos\n• Peso: ${profile.weight}kg\n• Altura: ${profile.height}cm\n• Sexo: ${profile.gender}\n• Atividade: ${profile.activity_level}\n• Objetivo: ${profile.goal}\n\n🎯 **METAS DIÁRIAS:**\n• 🔥 Calorias: ${profile.daily_calorie_target || 2000}kcal\n• 🥩 Proteínas: ${profile.target_protein}g\n• 🍞 Carboidratos: ${profile.target_carbs}g\n• 🥑 Gorduras: ${profile.target_fat}g\n• 💧 Água: ${profile.target_water}ml\n• 🌾 Fibras: ${profile.target_fiber}g\n\n📊 **CONSUMO ATUAL HOJE:**\n\n🔥 **Calorias:** ${dailyData.total_calories}kcal (${Math.round((dailyData.total_calories/(profile.daily_calorie_target || 2000))*100)}% da meta)\n${generateProgressBar(dailyData.total_calories, profile.daily_calorie_target || 2000)}\n\n🥩 **Proteínas:** ${dailyData.total_protein}g (${Math.round((dailyData.total_protein/profile.target_protein)*100)}% da meta)\n${generateProgressBar(dailyData.total_protein, profile.target_protein)}\n\n🍞 **Carboidratos:** ${dailyData.total_carbs}g (${Math.round((dailyData.total_carbs/profile.target_carbs)*100)}% da meta)\n${generateProgressBar(dailyData.total_carbs, profile.target_carbs)}\n\n🥑 **Gorduras:** ${dailyData.total_fat}g (${Math.round((dailyData.total_fat/profile.target_fat)*100)}% da meta)\n${generateProgressBar(dailyData.total_fat, profile.target_fat)}\n\n💧 **Água:** ${dailyData.total_water}ml (${Math.round((dailyData.total_water/profile.target_water)*100)}% da meta)\n${generateProgressBar(dailyData.total_water, profile.target_water)}\n\n🌾 **Fibras:** ${dailyData.total_fiber}g (${Math.round((dailyData.total_fiber/profile.target_fiber)*100)}% da meta)\n${generateProgressBar(dailyData.total_fiber, profile.target_fiber)}\n\n📷 **CONTEXTO DA IMAGEM:**\n• ⏰ Horário: ${timeContext.timeOfDay} (${timeContext.dayPeriod})\n• 🍽️ Refeição inferida: ${timeContext.mealType}\n• 💬 Legenda: \"${imageCaption}\"\n`;\n\n  switch(analysisType.type) {\n    case 'identificacao_alimento':\n      return baseContext + `\n🔍 **TAREFA: IDENTIFICAÇÃO DE ALIMENTOS**\n\n📋 **Analise a imagem e forneça:**\n1. 🍽️ Identifique todos os alimentos visíveis com quantidades\n2. 🧪 Descreva os ingredientes principais\n3. 👨‍🍳 Identifique o tipo de preparo (grelhado, frito, cozido, etc.)\n4. ⚖️ Estime as porções aproximadas\n5. 📊 Dê informações nutricionais básicas individuais\n\n📱 **FORMATO DE RESPOSTA OBRIGATÓRIO:**\n• Liste cada alimento identificado:\n  🍗 **Frango:** 120g (165 kcal, 31g prot, 0g carb, 4g gord)\n  🍝 **Macarrão:** 100g (220 kcal, 8g prot, 45g carb, 1g gord)\n• Use emojis apropriados para cada alimento\n• Seja educativo e detalhado\n• Formate para fácil leitura no celular\n• Evite linguagem técnica\n• Foque na praticidade para o usuário\n• NÃO inclua dados técnicos, JSON ou códigos`;\n      \n    case 'estimativa_porcao':\n      return baseContext + `\n⚖️ **TAREFA: ESTIMATIVA DE PORÇÕES**\n\n📋 **Analise a imagem e forneça:**\n1. 📏 Estime o peso/volume de cada alimento com valores nutricionais\n2. 🥄 Compare com porções padrão (colher, xícara, punho, etc.)\n3. ⚖️ Forneça estimativas em gramas/ml\n4. 🧠 Explique como chegou às estimativas\n5. 💡 Dê dicas para melhor controle de porções\n\n📱 **FORMATO DE RESPOSTA OBRIGATÓRIO:**\n• Liste cada alimento com peso e valores nutricionais:\n  🍗 **Frango:** 120g (165 kcal, 31g prot, 0g carb, 4g gord)\n  🍝 **Macarrão:** 100g (220 kcal, 8g prot, 45g carb, 1g gord)\n• Use comparações visuais fáceis de entender\n• Seja preciso mas didático\n• Inclua dicas práticas\n• Formate para leitura no celular\n• NÃO inclua dados técnicos, JSON ou códigos`;\n      \n    case 'quebra_nutricional':\n      return baseContext + `\n📊 **TAREFA: ANÁLISE NUTRICIONAL COMPLETA**\n\n📋 **Analise a imagem e forneça:**\n1. 🔥 Cálculo detalhado de calorias por alimento\n2. 📈 Breakdown completo de macronutrientes individuais\n3. 🥗 Principais vitaminas e minerais\n4. 🎯 Impacto nas suas metas diárias\n5. 💡 Sugestões de melhorias\n\n📱 **FORMATO DE RESPOSTA OBRIGATÓRIO:**\n• Liste cada alimento com valores nutricionais individuais:\n  🍗 **Frango:** 120g (165 kcal, 31g prot, 0g carb, 4g gord)\n  🍝 **Macarrão:** 100g (220 kcal, 8g prot, 45g carb, 1g gord)\n• Mostre totais nutricionais:\n  **Calorias:** 385 kcal\n  **Proteínas:** 39g\n  **Carboidratos:** 45g\n  **Gorduras:** 5g\n  **Fibras:** 3g\n• Use barras de progresso visuais [▓▓▓░░░]\n• Destaque pontos importantes com **negrito**\n• Seja motivacional no feedback\n• Formate para fácil leitura no celular\n• Inclua comparações com suas metas\n• NÃO inclua dados técnicos, JSON ou códigos`;\n      \n    case 'registro_refeicao':\n      return baseContext + `\n📝 **TAREFA: REGISTRO COMPLETO DA REFEIÇÃO**\n\n📋 **Analise a imagem e registre a refeição:**\n1. 🔍 Identifique e quantifique todos os alimentos\n2. 🧮 Calcule valores nutricionais totais E individuais\n3. 📝 Registre como ${timeContext.mealType}\n4. 📊 Forneça feedback sobre a refeição\n5. 💡 Sugira complementos se necessário\n\n📱 **FORMATO DE RESPOSTA OBRIGATÓRIO:**\n• Comece confirmando \"Refeição registrada com sucesso!\"\n• Liste cada alimento com emoji, quantidade E valores individuais:\n  🍗 **Frango:** 120g (165 kcal, 31g prot, 0g carb, 4g gord)\n  🍝 **Macarrão:** 100g (220 kcal, 8g prot, 45g carb, 1g gord)\n• Mostre totais nutricionais:\n  **Calorias:** 385 kcal\n  **Proteínas:** 39g\n  **Carboidratos:** 45g\n  **Gorduras:** 5g\n  **Fibras:** 3g\n• Dê feedback motivacional sobre a escolha\n• Sugira melhorias para próximas refeições\n• Use formatação mobile-friendly (sem tabelas)\n• IMPORTANTE: NÃO inclua dados técnicos, JSON ou códigos na resposta\n• Mantenha a resposta focada apenas no feedback para o usuário`;\n      \n    case 'analise_prato':\n    default:\n      return baseContext + `\n🍽️ **TAREFA: ANÁLISE COMPLETA DO PRATO**\n\n📋 **Analise a imagem e forneça:**\n1. 🔍 Identificação de todos os alimentos com valores individuais\n2. 📊 Avaliação nutricional da refeição\n3. ⚖️ Equilíbrio de macronutrientes\n4. 💡 Sugestões de melhorias\n5. 🎯 Adequação aos seus objetivos\n6. 👨‍🍳 Dicas de preparo mais saudável\n\n📱 **FORMATO DE RESPOSTA OBRIGATÓRIO:**\n• Liste cada alimento identificado com valores individuais:\n  🍗 **Frango:** 120g (165 kcal, 31g prot, 0g carb, 4g gord)\n  🍝 **Macarrão:** 100g (220 kcal, 8g prot, 45g carb, 1g gord)\n• Mostre totais nutricionais:\n  **Calorias:** 385 kcal\n  **Proteínas:** 39g\n  **Carboidratos:** 45g\n  **Gorduras:** 5g\n  **Fibras:** 3g\n• Use emojis para cada categoria nutricional\n• Destaque pontos positivos da refeição\n• Seja construtivo nas sugestões\n• Formate para fácil leitura no celular\n• Mantenha tom motivacional e educativo\n• NÃO inclua dados técnicos, JSON ou códigos`;\n  }\n}\n\nconst gptPrompt = buildVisionPrompt(\n  visionData.visionAnalysis,\n  visionData.timeContext,\n  profile,\n  dailyData,\n  visionData.imageCaption\n);\n\nreturn [{\n  json: {\n    ...visionData,\n    userProfile: profile,\n    dailySummary: dailyData,\n    gptPrompt: gptPrompt,\n    isNewUser: !userProfile,\n    userId: profile.id\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        140,
        820
      ],
      "id": "8ec3a55f-bc85-461a-a128-7214ac6c4b96",
      "name": "Prepare Vision Prompt"
    },
    {
      "parameters": {
        "jsCode": "// Processar resposta do GPT Vision e extrair dados estruturados\nconst gptResponse = $input.first().json.content;\nconst visionData = $('Prepare Vision Prompt').first().json;\n\n// Função para extrair informações nutricionais diretamente do texto\nconst extractNutritionFromText = (text) => {\n  // Procurar valores nutricionais no formato do exemplo\n  const caloriesMatch = text.match(/\\*\\*Calorias:\\*\\*\\s*(\\d+)\\s*kcal/i) || text.match(/(\\d+)\\s*kcal/i);\n  const proteinMatch = text.match(/\\*\\*Proteínas:\\*\\*\\s*(\\d+(?:\\.\\d+)?)\\s*g/i) || text.match(/(\\d+(?:\\.\\d+)?)\\s*g.*?prote/i);\n  const carbsMatch = text.match(/\\*\\*Carboidratos:\\*\\*\\s*(\\d+(?:\\.\\d+)?)\\s*g/i) || text.match(/(\\d+(?:\\.\\d+)?)\\s*g.*?carb/i);\n  const fatMatch = text.match(/\\*\\*Gorduras:\\*\\*\\s*(\\d+(?:\\.\\d+)?)\\s*g/i) || text.match(/(\\d+(?:\\.\\d+)?)\\s*g.*?gord/i);\n  const fiberMatch = text.match(/\\*\\*Fibras:\\*\\*\\s*(\\d+(?:\\.\\d+)?)\\s*g/i) || text.match(/(\\d+(?:\\.\\d+)?)\\s*g.*?fibra/i);\n  \n  return {\n    calories: caloriesMatch ? parseFloat(caloriesMatch[1]) : 0,\n    protein: proteinMatch ? parseFloat(proteinMatch[1]) : 0,\n    carbs: carbsMatch ? parseFloat(carbsMatch[1]) : 0,\n    fat: fatMatch ? parseFloat(fatMatch[1]) : 0,\n    fiber: fiberMatch ? parseFloat(fiberMatch[1]) : 0\n  };\n};\n\n// Função para extrair alimentos com valores nutricionais individuais\nconst extractFoodItemsWithNutrition = (text) => {\n  const foodItems = [];\n  \n  // Lista de macronutrientes para EXCLUIR\n  const macronutrients = ['calorias', 'proteínas', 'carboidratos', 'gorduras', 'fibras', 'totais nutricionais'];\n  \n  // Padrão melhorado para capturar o formato específico do prompt:\n  // 🍗 **Frango:** 120g (165 kcal, 31g prot, 0g carb, 4g gord)\n  const improvedFoodPattern = /([🍗🍝🥗🍖🍞🥑🌾🍎🥕🥬🧄🫘🥔🍅🍚🥩🐟🥪🍲🥘🍛🥙🌮🌯🥞🧇🥯🥖🍕🌭🍔🥨🥚🧀🥛])\\s*\\*\\*([^:*]+):\\*\\*\\s*([^(]+)\\(([^)]+)\\)/g;\n  \n  let match;\n  while ((match = improvedFoodPattern.exec(text)) !== null) {\n    const emoji = match[1];\n    const name = match[2].trim();\n    const quantity = match[3].trim();\n    const nutritionText = match[4];\n    \n    // Verificar se NÃO é um macronutriente\n    const isFood = !macronutrients.some(macro => \n      name.toLowerCase().includes(macro.toLowerCase())\n    );\n    \n    if (isFood) {\n      // Extrair valores nutricionais do texto entre parênteses\n      const calories = extractValueFromNutritionText(nutritionText, ['kcal', 'cal']);\n      const protein = extractValueFromNutritionText(nutritionText, ['prot', 'proteína']);\n      const carbs = extractValueFromNutritionText(nutritionText, ['carb', 'carboidrato']);\n      const fat = extractValueFromNutritionText(nutritionText, ['gord', 'gordura', 'fat']);\n      const fiber = extractValueFromNutritionText(nutritionText, ['fibra', 'fiber']);\n      \n      foodItems.push({\n        name: name,\n        quantity: quantity,\n        emoji: emoji,\n        calories: calories,\n        protein: protein,\n        carbs: carbs,\n        fat: fat,\n        fiber: fiber\n      });\n    }\n  }\n  \n  // Se não encontrou com o padrão melhorado, usar o padrão antigo\n  if (foodItems.length === 0) {\n    const detailedFoodPattern = /([🍗🍝🥗🍖🍞🥑🌾🍎🥕🥬🧄🫘🥔🍅🍚🥩🐟🥪🍲🥘🍛🥙🌮🌯🥞🧇🥯🥖🍕🌭🍔🥨🥚🧀🥛])\\s*\\*\\*([^:*]+):\\*\\*\\s*([^\\n]*?)(?:\\((\\d+)\\s*kcal[^)]*\\))?/g;\n    \n    while ((match = detailedFoodPattern.exec(text)) !== null) {\n      const name = match[2].trim();\n      const quantity = match[3].trim();\n      const emoji = match[1];\n      const calories = match[4] ? parseFloat(match[4]) : 0;\n      \n      // Verificar se NÃO é um macronutriente\n      const isFood = !macronutrients.some(macro => \n        name.toLowerCase().includes(macro.toLowerCase())\n      );\n      \n      if (isFood) {\n        // Tentar extrair valores nutricionais específicos do texto do alimento\n        const itemText = match[0];\n        const itemProtein = extractNutrientFromItemText(itemText, 'protein');\n        const itemCarbs = extractNutrientFromItemText(itemText, 'carbs');\n        const itemFat = extractNutrientFromItemText(itemText, 'fat');\n        const itemFiber = extractNutrientFromItemText(itemText, 'fiber');\n        \n        foodItems.push({\n          name: name,\n          quantity: quantity,\n          emoji: emoji,\n          calories: calories,\n          protein: itemProtein,\n          carbs: itemCarbs,\n          fat: itemFat,\n          fiber: itemFiber\n        });\n      }\n    }\n  }\n  \n  // Se ainda não encontrou alimentos com emoji, procurar alimentos conhecidos no texto\n  if (foodItems.length === 0) {\n    const commonFoods = [\n      { pattern: /\\b(?:frango|chicken)\\b/gi, name: 'Frango', emoji: '🍗' },\n      { pattern: /\\b(?:macarrão|pasta|penne|espaguete)\\b/gi, name: 'Macarrão', emoji: '🍝' },\n      { pattern: /\\b(?:arroz|rice)\\b/gi, name: 'Arroz', emoji: '🍚' },\n      { pattern: /\\b(?:feijão|beans)\\b/gi, name: 'Feijão', emoji: '🫘' },\n      { pattern: /\\b(?:carne|meat|beef)\\b/gi, name: 'Carne', emoji: '🥩' },\n      { pattern: /\\b(?:peixe|fish)\\b/gi, name: 'Peixe', emoji: '🐟' },\n      { pattern: /\\b(?:salada|salad)\\b/gi, name: 'Salada', emoji: '🥗' },\n      { pattern: /\\b(?:batata|potato)\\b/gi, name: 'Batata', emoji: '🥔' }\n    ];\n    \n    commonFoods.forEach(food => {\n      if (food.pattern.test(text)) {\n        const alreadyExists = foodItems.some(item => \n          item.name.toLowerCase() === food.name.toLowerCase()\n        );\n        \n        if (!alreadyExists) {\n          foodItems.push({\n            name: food.name,\n            quantity: '1 porção',\n            emoji: food.emoji,\n            calories: 0,\n            protein: 0,\n            carbs: 0,\n            fat: 0,\n            fiber: 0\n          });\n        }\n      }\n    });\n  }\n  \n  return foodItems;\n};\n\n// Função auxiliar para extrair valores do texto nutricional\nconst extractValueFromNutritionText = (nutritionText, keywords) => {\n  for (const keyword of keywords) {\n    // Procurar padrão: número + g/kcal + keyword\n    const pattern = new RegExp(`(\\\\d+(?:\\\\.\\\\d+)?)\\\\s*(?:g|kcal)?\\\\s*${keyword}`, 'i');\n    const match = nutritionText.match(pattern);\n    if (match) {\n      return parseFloat(match[1]);\n    }\n    \n    // Procurar padrão: keyword + número\n    const reversePattern = new RegExp(`${keyword}\\\\s*(\\\\d+(?:\\\\.\\\\d+)?)`, 'i');\n    const reverseMatch = nutritionText.match(reversePattern);\n    if (reverseMatch) {\n      return parseFloat(reverseMatch[1]);\n    }\n  }\n  return 0;\n};\n\n// Função auxiliar para extrair nutrientes específicos do texto de um alimento\nconst extractNutrientFromItemText = (itemText, nutrientType) => {\n  const patterns = {\n    protein: /(\\d+(?:\\.\\d+)?)\\s*g.*?prote/i,\n    carbs: /(\\d+(?:\\.\\d+)?)\\s*g.*?carb/i,\n    fat: /(\\d+(?:\\.\\d+)?)\\s*g.*?gord/i,\n    fiber: /(\\d+(?:\\.\\d+)?)\\s*g.*?fibra/i\n  };\n  \n  const match = itemText.match(patterns[nutrientType]);\n  return match ? parseFloat(match[1]) : 0;\n};\n\n// Extrair dados nutricionais do texto\nconst nutrition = extractNutritionFromText(gptResponse);\nconst foodItems = extractFoodItemsWithNutrition(gptResponse);\n\n// Se os alimentos não têm valores nutricionais individuais, usar estimativa inteligente\nif (foodItems.length > 0) {\n  const totalItemCalories = foodItems.reduce((sum, item) => sum + item.calories, 0);\n  \n  // Se nenhum alimento tem calorias individuais, mas temos total\n  if (totalItemCalories === 0 && nutrition.calories > 0) {\n    // Usar estimativas baseadas no tipo de alimento\n    const foodNutritionEstimates = {\n      'frango': { caloriesPerPortion: 165, proteinRatio: 0.31, carbsRatio: 0, fatRatio: 0.036 },\n      'macarrão': { caloriesPerPortion: 220, proteinRatio: 0.08, carbsRatio: 0.75, fatRatio: 0.011 },\n      'arroz': { caloriesPerPortion: 130, proteinRatio: 0.027, carbsRatio: 0.28, fatRatio: 0.003 },\n      'salada': { caloriesPerPortion: 20, proteinRatio: 0.02, carbsRatio: 0.04, fatRatio: 0.002 },\n      'feijão': { caloriesPerPortion: 245, proteinRatio: 0.15, carbsRatio: 0.45, fatRatio: 0.01 },\n      'carne': { caloriesPerPortion: 250, proteinRatio: 0.26, carbsRatio: 0, fatRatio: 0.17 },\n      'peixe': { caloriesPerPortion: 206, proteinRatio: 0.22, carbsRatio: 0, fatRatio: 0.12 },\n      'batata': { caloriesPerPortion: 161, proteinRatio: 0.02, carbsRatio: 0.37, fatRatio: 0.001 }\n    };\n    \n    // Calcular estimativas para cada alimento\n    let totalEstimatedCalories = 0;\n    foodItems.forEach(item => {\n      const foodKey = item.name.toLowerCase();\n      const estimate = foodNutritionEstimates[foodKey] || { caloriesPerPortion: 100, proteinRatio: 0.1, carbsRatio: 0.2, fatRatio: 0.05 };\n      \n      item.calories = estimate.caloriesPerPortion;\n      item.protein = Math.round((estimate.caloriesPerPortion * estimate.proteinRatio / 4) * 10) / 10; // 4 cal/g proteína\n      item.carbs = Math.round((estimate.caloriesPerPortion * estimate.carbsRatio / 4) * 10) / 10; // 4 cal/g carbs\n      item.fat = Math.round((estimate.caloriesPerPortion * estimate.fatRatio / 9) * 10) / 10; // 9 cal/g gordura\n      item.fiber = Math.round((item.carbs * 0.1) * 10) / 10; // Estimativa de fibra\n      \n      totalEstimatedCalories += item.calories;\n    });\n    \n    // Ajustar proporcionalmente se o total estimado for muito diferente do real\n    if (Math.abs(totalEstimatedCalories - nutrition.calories) > 50) {\n      const adjustmentFactor = nutrition.calories / totalEstimatedCalories;\n      foodItems.forEach(item => {\n        item.calories = Math.round(item.calories * adjustmentFactor);\n        item.protein = Math.round((item.protein * adjustmentFactor) * 10) / 10;\n        item.carbs = Math.round((item.carbs * adjustmentFactor) * 10) / 10;\n        item.fat = Math.round((item.fat * adjustmentFactor) * 10) / 10;\n        item.fiber = Math.round((item.fiber * adjustmentFactor) * 10) / 10;\n      });\n    }\n  }\n}\n\n// Se não encontrou alimentos, criar um genérico\nif (foodItems.length === 0) {\n  foodItems.push({\n    name: 'Refeição analisada',\n    quantity: '1 porção',\n    emoji: '🍽️',\n    calories: nutrition.calories,\n    protein: nutrition.protein,\n    carbs: nutrition.carbs,\n    fat: nutrition.fat,\n    fiber: nutrition.fiber\n  });\n}\n\n// Criar estrutura meal_data padronizada\nconst structuredData = {\n  meal_data: {\n    calories: nutrition.calories,\n    protein: nutrition.protein,\n    carbs: nutrition.carbs,\n    fat: nutrition.fat,\n    fiber: nutrition.fiber,\n    food_items: foodItems\n  }\n};\n\n// Preparar resposta limpa para o usuário (remover JSON se houver)\nconst cleanResponse = gptResponse.replace(/```json[\\s\\S]*?```/g, '').replace(/🔄\\s*\\*\\*Dados Técnicos[\\s\\S]*$/i, '').trim();\n\n// Calcular tokens usados (estimativa para Vision - mais tokens devido à imagem)\nconst baseTokens = Math.ceil((visionData.gptPrompt.length + gptResponse.length) / 4);\nconst imageTokens = 1500; // Estimativa para análise de imagem em alta resolução\nconst tokensUsed = baseTokens + imageTokens;\n\n// Sempre será true agora pois criamos meal_data\nconst needsDbUpdate = true;\n\n// Extrair dados de identificação de alimentos para compatibilidade\nfunction extractFoodData(text) {\n  return {\n    identifiedFoods: foodItems.map(item => item.name),\n    hasNutritionalData: nutrition.calories > 0\n  };\n}\n\nconst extractedFoodData = extractFoodData(gptResponse);\n\nreturn [{\n  json: {\n    ...visionData,\n    gptResponse: cleanResponse,\n    structuredData: structuredData,\n    extractedFoodData: extractedFoodData,\n    tokensUsed: tokensUsed,\n    needsDbUpdate: needsDbUpdate,\n    analysisType: visionData.visionAnalysis.type,\n    nutritionExtracted: nutrition,\n    foodItemsExtracted: foodItems\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        820
      ],
      "id": "70200ae2-da9e-4faa-9770-b58db414f9ab",
      "name": "Process Vision Response"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "Dieta Facil Dev",
        "remoteJid": "={{ $json.messageData.phoneNumber.split('@')[0] }}",
        "messageText": "={{ $json.gptResponse }}",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        1420,
        460
      ],
      "id": "f235797f-d00b-4ade-bc3f-ebf4717da48d",
      "name": "Send Vision Response",
      "credentials": {
        "evolutionApi": {
          "id": "8Vyn5rMuwjwiaAUs",
          "name": "Instancia Dev"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.needsDbUpdate }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1200,
        1020
      ],
      "id": "8f3909b8-7fec-470d-aa97-13cf6121febd",
      "name": "Check Needs DB Update"
    },
    {
      "parameters": {
        "tableId": "meals",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "diary_day_id",
              "fieldValue": "={{ $json.diary_day_id }}"
            },
            {
              "fieldId": "meal_type_id",
              "fieldValue": "={{ \n  (() => {\n    const h = parseInt(new Date().toLocaleString('pt-BR', {\n      timeZone: 'America/Fortaleza',\n      hour: '2-digit',\n      hour12: false\n    }));\n    return h >= 5 && h < 10 ? 1 : h >= 10 && h < 15 ? 2 : h >= 15 && h < 19 ? 3 : 4;\n  })()\n}}"
            },
            {
              "fieldId": "time_consumed",
              "fieldValue": "={{ new Date().toISOString() }}"
            },
            {
              "fieldId": "protein",
              "fieldValue": "={{ $json.structuredData.meal_data.protein || 0 }}"
            },
            {
              "fieldId": "carbs",
              "fieldValue": "={{ $json.structuredData.meal_data.carbs || 0 }}"
            },
            {
              "fieldId": "fat",
              "fieldValue": "={{ $json.structuredData.meal_data.fat || 0 }}"
            },
            {
              "fieldId": "fiber",
              "fieldValue": "={{ $json.structuredData.meal_data.fiber || 0 }}"
            },
            {
              "fieldId": "calories",
              "fieldValue": "={{ $json.structuredData.meal_data.calories || 0 }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1660,
        1140
      ],
      "id": "5737a3b3-0954-4654-b2f1-f484344328c5",
      "name": "Create Meal with Image",
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Criar food_items para a refeição analisada por visão\nconst processedData = $('Process Vision Response').first().json;\nconst mealId = $('Create Meal with Image').first().json.id;\nconst foodItems = processedData.structuredData?.meal_data?.food_items || [];\n\n// Verificar se temos dados válidos\nif (!mealId) {\n  throw new Error('meal_id não encontrado');\n}\n\nif (!foodItems || foodItems.length === 0) {\n  // Se não há food_items, criar um item genérico baseado nos dados nutricionais\n  const nutrition = processedData.nutritionExtracted || {};\n  const genericItem = {\n    meal_id: mealId,\n    name: 'Refeição analisada por imagem',\n    quantity: '1 porção',\n    emoji: '📷',\n    protein: nutrition.protein || 0,\n    carbs: nutrition.carbs || 0,\n    fat: nutrition.fat || 0,\n    fiber: nutrition.fiber || 0,\n    calories: nutrition.calories || 0,\n    source: 'vision_analysis'\n  };\n  \n  return [{ json: genericItem }];\n}\n\n// Preparar dados para inserção em lote\nconst foodItemsToInsert = foodItems.map(item => ({\n  meal_id: mealId,\n  name: item.name || 'Alimento não identificado',\n  quantity: item.quantity || '1 porção',\n  emoji: item.emoji || '📷',\n  protein: parseFloat(item.protein) || 0,\n  carbs: parseFloat(item.carbs) || 0,\n  fat: parseFloat(item.fat) || 0,\n  fiber: parseFloat(item.fiber) || 0,\n  calories: parseFloat(item.calories) || 0,\n  source: 'vision_analysis'\n}));\n\n// Verificar se todos os itens têm meal_id válido\nconst validItems = foodItemsToInsert.filter(item => item.meal_id && item.name);\n\nif (validItems.length === 0) {\n  throw new Error('Nenhum food_item válido para inserir');\n}\n\nreturn validItems.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1840,
        900
      ],
      "id": "0b83ca5d-2b12-40b4-a34c-b481a1997d00",
      "name": "Prepare Vision Food Items"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "c1a1b2c3-d4e5-f6g7-h8i9-j0k1l2m3n4o5",
              "leftValue": "={{ $json.meal_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            },
            {
              "id": "c2a1b2c3-d4e5-f6g7-h8i9-j0k1l2m3n4o6",
              "leftValue": "={{ $json.name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2040,
        1180
      ],
      "id": "f4b0c63a-a143-4771-9aba-1d7890e8dbb4",
      "name": "Validate Food Items Data"
    },
    {
      "parameters": {
        "tableId": "food_items",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "meal_id",
              "fieldValue": "={{ $json.meal_id }}"
            },
            {
              "fieldId": "name",
              "fieldValue": "={{ $json.name }}"
            },
            {
              "fieldId": "quantity",
              "fieldValue": "={{ $json.quantity }}"
            },
            {
              "fieldId": "protein",
              "fieldValue": "={{ $json.protein }}"
            },
            {
              "fieldId": "carbs",
              "fieldValue": "={{ $json.carbs }}"
            },
            {
              "fieldId": "fat",
              "fieldValue": "={{ $json.fat }}"
            },
            {
              "fieldId": "fiber",
              "fieldValue": "={{ $json.fiber }}"
            },
            {
              "fieldId": "calories",
              "fieldValue": "={{ $json.calories }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2560,
        1080
      ],
      "id": "b349cca1-e8ce-4fbb-b8ca-f5b91fa724f3",
      "name": "Create Vision Food Items",
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "message_classifications",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "phone_number",
              "fieldValue": "={{ $('Analyze Vision Request').last().json.normalizedPhone }}"
            },
            {
              "fieldId": "message_text",
              "fieldValue": "={{ $('Analyze Vision Request').last().json.messageData.imageMessage.caption || 'Imagem sem legenda' }}"
            },
            {
              "fieldId": "message_type",
              "fieldValue": "image"
            },
            {
              "fieldId": "classification_type",
              "fieldValue": "VISION"
            },
            {
              "fieldId": "confidence",
              "fieldValue": "1.0"
            },
            {
              "fieldId": "queue_name",
              "fieldValue": "vision"
            },
            {
              "fieldId": "model_assigned",
              "fieldValue": "gpt-4o-vision"
            },
            {
              "fieldId": "estimated_tokens",
              "fieldValue": "2000"
            },
            {
              "fieldId": "analysis_data",
              "fieldValue": "={{ JSON.stringify($('Process Vision Response').item.json.analysisResult) }}"
            },
            {
              "fieldId": "processing_time_ms",
              "fieldValue": "={{ Math.round(Date.now() - $('Analyze Vision Request').last().json.startTime) }}"
            },
            {
              "fieldId": "actual_tokens_used",
              "fieldValue": "={{ $('OpenAI1').item.json.usage?.total_tokens || 0 }}"
            },
            {
              "fieldId": "status",
              "fieldValue": "completed"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3000,
        640
      ],
      "id": "1a96a77b-e70d-41a3-81e1-e07bd2d7985c",
      "name": "Create Vision Classification Log",
      "credentials": {
        "supabaseApi": {
          "id": "Q6au73rD3NBpnLGb",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "incr",
        "key": "metrics:vision:completed"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3040,
        900
      ],
      "id": "d87fac68-8bc3-405e-93f8-dca77398aba4",
      "name": "Increment Vision Completed Metric",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "metrics:vision:last_processed",
        "value": "={{ Date.now().toString() }}"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        3040,
        1280
      ],
      "id": "ce2138b5-6c25-4338-a853-2a1ce24248b6",
      "name": "Update Vision Last Processed",
      "credentials": {
        "redis": {
          "id": "SGooYEMsAI8ce5zh",
          "name": "Redis account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "maxTokens": 3000,
          "temperature": 0.3
        },
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        -60,
        1060
      ],
      "id": "5b39b15e-545c-4f58-bcc7-c2b7eb851c6a",
      "name": "GPT Vision Analysis Old",
      "credentials": {
        "openAiApi": {
          "id": "hDbVS33gRemwNAep",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -80,
        820
      ],
      "id": "4c8fb08f-a4d9-49e8-aa18-d0bb878a57c8",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Converter imagem do WhatsApp para formato compatível com OpenAI\nconst visionData = $input.first().json;\nconst imageData = visionData.imageData;\n\n// Função para converter base64 para data URL se necessário\nfunction formatImageForOpenAI(imageData) {\n  // Se já tem base64, usar diretamente\n  if (imageData.base64) {\n    // Garantir que está no formato data URL correto\n    const base64Data = imageData.base64;\n    const mimeType = imageData.mimetype || 'image/jpeg';\n    \n    // Se já está no formato data URL, retornar como está\n    if (base64Data.startsWith('data:')) {\n      return base64Data;\n    }\n    \n    // Caso contrário, criar data URL\n    return `data:${mimeType};base64,${base64Data}`;\n  }\n  \n  // Se não tem base64, usar jpegThumbnail como fallback\n  if (imageData.jpegThumbnail) {\n    return `data:image/jpeg;base64,${imageData.jpegThumbnail}`;\n  }\n  \n  throw new Error('Nenhum formato de imagem válido encontrado');\n}\n\ntry {\n  const formattedImageUrl = formatImageForOpenAI(imageData);\n  \n  return [{\n    json: {\n      ...visionData,\n      formattedImageUrl: formattedImageUrl,\n      hasValidImage: true,\n      imageFormat: imageData.mimetype || 'image/jpeg'\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      ...visionData,\n      formattedImageUrl: null,\n      hasValidImage: false,\n      imageError: error.message\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -720,
        800
      ],
      "id": "9d36f177-d3cd-4325-ba1b-fa54e0f91b5c",
      "name": "Format Image for OpenAI"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.gptPrompt }}\nSegue abaixo a url da imagem para analise:\n{{ $json.formattedImageUrl }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        740,
        240
      ],
      "id": "ed1013e0-fb6f-4f0f-bb77-b54bf729b70e",
      "name": "AI Agent",
      "disabled": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "chatgpt-4o-latest"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        740,
        460
      ],
      "id": "978a5b4a-2d6d-418a-b29a-6567dc918abd",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "hDbVS33gRemwNAep",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT get_or_create_diary_day('{{ $json.userId }}') as diary_day_id",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1480,
        960
      ],
      "id": "0eb2ef8b-80e9-42f0-aaf5-14019a69fe77",
      "name": "LoadOrCreateDiaryDay",
      "credentials": {
        "postgres": {
          "id": "m8W5D6Ml6jkdbYon",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "seconds"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1340,
        800
      ],
      "id": "92aafd8e-1719-4b38-a575-3a3e2d24c309",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "data",
        "options": {
          "fileName": "file.png",
          "mimeType": "image/png"
        }
      },
      "id": "67bf743f-675f-44af-a5e4-e9f939948d31",
      "name": "Convert to File1",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        540,
        700
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3c5ccbc9-69d1-4b13-a7c3-e6945bc8c655",
              "name": "data",
              "value": "={{ $json.messageData.messageText.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "08412ab5-0977-4ff7-a1b8-60f7a3b7fc7d",
      "name": "Edit Fields3",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        360,
        700
      ]
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "text": "={{ $('Prepare Vision Prompt').item.json.gptPrompt }}",
        "inputType": "base64",
        "options": {
          "maxTokens": 2000
        }
      },
      "id": "6bec84fb-cc7e-4c1a-8bb7-f1660d04ce1a",
      "name": "OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        720,
        700
      ],
      "credentials": {
        "openAiApi": {
          "id": "hDbVS33gRemwNAep",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "amount": 1
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2720,
        1100
      ],
      "id": "1744b14b-4702-41ef-a4e7-737442eeedee",
      "name": "Wait",
      "webhookId": "4408acad-a8ef-445a-973f-506be043b0ea"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        2340,
        1000
      ],
      "id": "5059df3b-01d4-484b-82bb-2f79bd787a32",
      "name": "Loop Over Items"
    }
  ],
  "connections": {
    "Pop Vision Queue": {
      "main": [
        [
          {
            "node": "Analyze Vision Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Vision Request": {
      "main": [
        [
          {
            "node": "Format Image for OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get User Profile": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Daily Summary": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Prepare Vision Prompt": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Vision Response": {
      "main": [
        [
          {
            "node": "Send Vision Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Needs DB Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Needs DB Update": {
      "main": [
        [
          {
            "node": "LoadOrCreateDiaryDay",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Meal with Image": {
      "main": [
        [
          {
            "node": "Prepare Vision Food Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Vision Food Items": {
      "main": [
        [
          {
            "node": "Validate Food Items Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Food Items Data": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Vision Food Items": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Vision Classification Log": {
      "main": [
        [
          {
            "node": "Increment Vision Completed Metric",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Increment Vision Completed Metric": {
      "main": [
        [
          {
            "node": "Update Vision Last Processed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Prepare Vision Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Image for OpenAI": {
      "main": [
        [
          {
            "node": "Get User Profile",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Daily Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "LoadOrCreateDiaryDay": {
      "main": [
        [
          {
            "node": "Create Meal with Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Pop Vision Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "OpenAI1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI1": {
      "main": [
        [
          {
            "node": "Process Vision Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Create Vision Classification Log",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Vision Food Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Pop Vision Queue": [
      {
        "json": {
          "propertyName": {
            "originalMessage": {
              "phoneNumber": "558599028259@s.whatsapp.net",
              "messageType": "imageMessage",
              "imageMessage": {
                "url": "https://mmg.whatsapp.net/o1/v/t24/f2/m239/AQMXolKTnqLduXCXy2tQ_vfBwA-wafiwty4KaZcR0pSObsUpUKKb6hB978dps34kTQDSqVGQ3swlvg0IU4ouzF2BW9t8mCdZFfTRVdvFLQ?ccb=9-4&oh=01_Q5Aa1wGXaGmsCBIACFQ-CF4GOqFiLw9XHuah5HnsttRKAPgv9w&oe=686EC10B&_nc_sid=e6ed6c&mms3=true",
                "mimetype": "image/jpeg",
                "caption": "Comi isso agora",
                "fileSha256": "HwSA7rdhNsGdiAe+8mpongSlshkohRCO5VxdCx+IdEc=",
                "fileLength": "97039",
                "height": 1599,
                "width": 899,
                "mediaKey": "x/RJsFysiSTzkR2beToWty6FsxNnKonmaCkjYsN2vWU=",
                "fileEncSha256": "B+G5dWgj0VFDrS5wltMMccs0qua7cVegdWx9BnpV7co=",
                "directPath": "/o1/v/t24/f2/m239/AQMXolKTnqLduXCXy2tQ_vfBwA-wafiwty4KaZcR0pSObsUpUKKb6hB978dps34kTQDSqVGQ3swlvg0IU4ouzF2BW9t8mCdZFfTRVdvFLQ?ccb=9-4&oh=01_Q5Aa1wGXaGmsCBIACFQ-CF4GOqFiLw9XHuah5HnsttRKAPgv9w&oe=686EC10B&_nc_sid=e6ed6c",
                "mediaKeyTimestamp": "1749503877",
                "jpegThumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDABsSFBcUERsXFhceHBsgKEIrKCUlKFE6PTBCYFVlZF9VXVtqeJmBanGQc1tdhbWGkJ6jq62rZ4C8ybqmx5moq6T/2wBDARweHigjKE4rK06kbl1upKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKT/wgARCABIAEgDASIAAhEBAxEB/8QAGQAAAgMBAAAAAAAAAAAAAAAAAAIBAwQF/8QAFwEAAwEAAAAAAAAAAAAAAAAAAAECA//aAAwDAQACEAMQAAAA3kAmlCaeYE5iK2sRWUdNqpkgkzuHy1j35Kk0hRhreNCaVNzYttPNctuhkvBhzTHVDS5w87u5JvmW22zpXomys7Csc6AHIgDqzgObARiAD//EABoRAQACAwEAAAAAAAAAAAAAAAEAEQIQIBL/2gAIAQIBAT8AjlPUG9ZOiCaS5XKSmV3/AP/EAB0RAAIDAAIDAAAAAAAAAAAAAAABAhAREjEgIUH/2gAIAQMBAT8AFE4jWUlbi1SeC9mI+XGWdnJdjk34K//EACcQAAICAQQBBAIDAQAAAAAAAAECABEDBBIhMUEQEyJRYXEgM0JD/9oACAEBAAE/APS4JVGUauDsR+LmZ9+Wh49O/MYhYHP6hPwvqBrxwGzM77VJn/Td9ywCIyWNyxaF2YBubg8TK9ggeIn9YJnFWDNVk/yJ5jnmLkOOr6mZQy70avxMNLjJPBnvIEbabNzU5ywRFah5iZSjKA1gzNuGTmYl3tXiEWYyjz4m8gUBxMrEobah9z3VV+ORCuny49zNtI5sQPWQsDa3xAwOEb65HUxqyrad/UFA2YTfiZciYhuc/oTUahsz1dLCepirq7P1MAVWJqonzfqh4gxvvCqe+/x6VNfiOTGCOxCtHjqBe2PUwJtXfXJMUW3AswKClg8zAhxJZ5Y+rC5nwr2BPaU0DYEcAqFUcCYcO29w5ImNUU7hyR0JqdR7GMtxf8HUN4mRCosLYhzsD8RzMeclryT4kXj5Y9n6moZtRqBhBsDuf//+AAMA/9k=",
                "contextInfo": {},
                "firstScanSidecar": "fXeIvF+bKGNEqw==",
                "firstScanLength": 11899,
                "scansSidecar": "fXeIvF+bKGNEq2Swd1t0DUlWTrgEHghHbT7ANYJASjL3XtYF8cU4wA==",
                "scanLengths": [
                  11899,
                  37994,
                  21627,
                  25517
                ],
                "midQualityFileSha256": "4OXXJBbN9lAboKuKI+YKpJzuYrmUMy2mv15nWliyoBo="
              },
              "imageCaption": "Comi isso agora",
              "pushName": "Vitorio",
              "messageText": {
                "phoneNumber": "558599028259@s.whatsapp.net",
                "messageType": "imageMessage",
                "messageText": "",
                "imageCaption": "Comi isso agora",
                "hasAudio": false,
                "hasImage": true,
                "timestamp": 1749503878,
                "pushName": "Vitorio",
                "userId": "e6b07780-c9b5-4455-bcd9-97214020496f",
                "imageMessage": {
                  "url": "https://mmg.whatsapp.net/o1/v/t24/f2/m239/AQMXolKTnqLduXCXy2tQ_vfBwA-wafiwty4KaZcR0pSObsUpUKKb6hB978dps34kTQDSqVGQ3swlvg0IU4ouzF2BW9t8mCdZFfTRVdvFLQ?ccb=9-4&oh=01_Q5Aa1wGXaGmsCBIACFQ-CF4GOqFiLw9XHuah5HnsttRKAPgv9w&oe=686EC10B&_nc_sid=e6ed6c&mms3=true",
                  "mimetype": "image/jpeg",
                  "caption": "Comi isso agora",
                  "fileSha256": "HwSA7rdhNsGdiAe+8mpongSlshkohRCO5VxdCx+IdEc=",
                  "fileLength": "97039",
                  "height": 1599,
                  "width": 899,
                  "mediaKey": "x/RJsFysiSTzkR2beToWty6FsxNnKonmaCkjYsN2vWU=",
                  "fileEncSha256": "B+G5dWgj0VFDrS5wltMMccs0qua7cVegdWx9BnpV7co=",
                  "directPath": "/o1/v/t24/f2/m239/AQMXolKTnqLduXCXy2tQ_vfBwA-wafiwty4KaZcR0pSObsUpUKKb6hB978dps34kTQDSqVGQ3swlvg0IU4ouzF2BW9t8mCdZFfTRVdvFLQ?ccb=9-4&oh=01_Q5Aa1wGXaGmsCBIACFQ-CF4GOqFiLw9XHuah5HnsttRKAPgv9w&oe=686EC10B&_nc_sid=e6ed6c",
                  "mediaKeyTimestamp": "1749503877",
                  "jpegThumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDABsSFBcUERsXFhceHBsgKEIrKCUlKFE6PTBCYFVlZF9VXVtqeJmBanGQc1tdhbWGkJ6jq62rZ4C8ybqmx5moq6T/2wBDARweHigjKE4rK06kbl1upKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKT/wgARCABIAEgDASIAAhEBAxEB/8QAGQAAAgMBAAAAAAAAAAAAAAAAAAIBAwQF/8QAFwEAAwEAAAAAAAAAAAAAAAAAAAECA//aAAwDAQACEAMQAAAA3kAmlCaeYE5iK2sRWUdNqpkgkzuHy1j35Kk0hRhreNCaVNzYttPNctuhkvBhzTHVDS5w87u5JvmW22zpXomys7Csc6AHIgDqzgObARiAD//EABoRAQACAwEAAAAAAAAAAAAAAAEAEQIQIBL/2gAIAQIBAT8AjlPUG9ZOiCaS5XKSmV3/AP/EAB0RAAIDAAIDAAAAAAAAAAAAAAABAhAREjEgIUH/2gAIAQMBAT8AFE4jWUlbi1SeC9mI+XGWdnJdjk34K//EACcQAAICAQQBBAIDAQAAAAAAAAECABEDBBIhMUEQEyJRYXEgM0JD/9oACAEBAAE/APS4JVGUauDsR+LmZ9+Wh49O/MYhYHP6hPwvqBrxwGzM77VJn/Td9ywCIyWNyxaF2YBubg8TK9ggeIn9YJnFWDNVk/yJ5jnmLkOOr6mZQy70avxMNLjJPBnvIEbabNzU5ywRFah5iZSjKA1gzNuGTmYl3tXiEWYyjz4m8gUBxMrEobah9z3VV+ORCuny49zNtI5sQPWQsDa3xAwOEb65HUxqyrad/UFA2YTfiZciYhuc/oTUahsz1dLCepirq7P1MAVWJqonzfqh4gxvvCqe+/x6VNfiOTGCOxCtHjqBe2PUwJtXfXJMUW3AswKClg8zAhxJZ5Y+rC5nwr2BPaU0DYEcAqFUcCYcO29w5ImNUU7hyR0JqdR7GMtxf8HUN4mRCosLYhzsD8RzMeclryT4kXj5Y9n6moZtRqBhBsDuf//+AAMA/9k=",
                  "contextInfo": {},
                  "firstScanSidecar": "fXeIvF+bKGNEqw==",
                  "firstScanLength": 11899,
                  "scansSidecar": "fXeIvF+bKGNEq2Swd1t0DUlWTrgEHghHbT7ANYJASjL3XtYF8cU4wA==",
                  "scanLengths": [
                    11899,
                    37994,
                    21627,
                    25517
                  ],
                  "midQualityFileSha256": "4OXXJBbN9lAboKuKI+YKpJzuYrmUMy2mv15nWliyoBo="
                },
                "base64": ""
              }
            },
            "classification": {
              "type": "VISION",
              "confidence": 1,
              "reasoning": {
                "textLength": 15,
                "wordCount": 3,
                "hasNumbers": false,
                "hasUnits": false,
                "classification": "VISION"
              }
            },
            "routing": {
              "queue": "queue:vision",
              "model": "gpt-4o",
              "priority": 4,
              "timeout": 45000,
              "maxRetries": 3,
              "estimatedTokens": 3000
            },
            "analysis": {
              "messageLength": 15,
              "wordCount": 3,
              "specialFlags": {
                "isGreeting": false,
                "isThankYou": false,
                "isQuestion": false,
                "hasNumbers": false,
                "isList": false
              },
              "processingTime": "2025-06-09T21:18:00.113Z"
            }
          }
        }
      }
    ]
  },
  "versionId": "68e8d5b1-0f33-45e4-8d83-98fbf5d66454",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-05-30T11:31:18.780Z",
      "updatedAt": "2025-05-30T11:31:18.780Z",
      "id": "MkMWJqdLSlMeJZ5k",
      "name": "claude_solution"
    }
  ]
}